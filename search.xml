<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nginx配置ssl</title>
      <link href="/2025/06/02/nginx%E9%85%8D%E7%BD%AEssl/"/>
      <url>/2025/06/02/nginx%E9%85%8D%E7%BD%AEssl/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx配置ssl"><a href="#nginx配置ssl" class="headerlink" title="nginx配置ssl"></a>nginx配置ssl</h1><p>参考博客</p><blockquote><p><a href="https://www.cnblogs.com/ambition26/p/14077773.html">https://www.cnblogs.com/ambition26/p/14077773.html</a></p></blockquote><h1 id="Nginx的ssl模块安装"><a href="#Nginx的ssl模块安装" class="headerlink" title="Nginx的ssl模块安装"></a>Nginx的ssl模块安装</h1><p>在配置ssl证书之前，要确保你的nginx已经安装了ssl模块，一般情况下自己安装的nginx都是不存在ssl模块的。<br>这里先检查下自己是否存在ssl模块：</p><p>进入到你的nginx安装目录下面，我的目录是在（/usr/local/nginx），如果你的nginx安装步骤和上面的文章一致的话，那你的目录和我应该是一致的<br>进入到目录的sbin目录下，输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意这里是大写的V，小写的只显示版本号</span></span><br><span class="line">./nginx -V  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果出现 (configure arguments: —with-http_ssl_module), 则已安装<br>一般是无</p><p>接下来安装ssl模块<br>进入到你的解压缩后的nginx目录，注意这里不是nginx安装目录！！，是解压缩后的目录，我的是在（…/nginx-1.17.9），进入目录后，输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</span><br></pre></td></tr></table></figure></p><p>接下来执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">#切记不要执行make install，否则会重新安装nginx</span><br></pre></td></tr></table></figure><p>这里由于我的nginx版本较老，而openssl版本较新，编译出了一些问题</p><ol><li><p>手动安装 OpenSSL 1.1.1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 下载 OpenSSL 1.1.1 源码（以 1.1.1w 为例）</span><br><span class="line">cd /usr/local/src</span><br><span class="line">sudo wget https://www.openssl.org/source/old/1.1.1/openssl-1.1.1w.tar.gz</span><br><span class="line">sudo tar -zxvf openssl-1.1.1w.tar.gz</span><br><span class="line">cd openssl-1.1.1w</span><br><span class="line"></span><br><span class="line"># 编译安装到 /usr/local/openssl-1.1.1</span><br><span class="line">sudo ./config --prefix=/usr/local/openssl-1.1.1 --openssldir=/usr/local/openssl-1.1.1 shared zlib</span><br><span class="line">sudo make -j$(nproc)</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li><li><p>重新配置 Nginx 使用 OpenSSL 1.1.1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx-1.17.9</span><br><span class="line"></span><br><span class="line"># 清除之前的 configure 结果（如有）</span><br><span class="line">make clean</span><br><span class="line"></span><br><span class="line"># 配置 Nginx 使用你刚刚安装的 OpenSSL 1.1.1</span><br><span class="line">./configure \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-openssl=/usr/local/src/openssl-1.1.1 \</span><br><span class="line">--with-cc-opt=&quot;-I/usr/local/openssl-1.1.1/include&quot; \</span><br><span class="line">--with-ld-opt=&quot;-L/usr/local/openssl-1.1.1/lib&quot;</span><br><span class="line"></span><br><span class="line"># 编译</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"># 安装（可选）</span><br><span class="line">sudo make install</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里可能路径有些问题，一个是编译后的一个是源码解压后的，自己看一下试一下</p></li></ol><p>上述操作执行完成以后，你的目录下会出现objs文件夹，文件夹内存在nginx文件<br>接下来使用新的nginx文件替换掉之前安装目录sbin下的nginx<br>成功之后，进入到nginx安装目录下，查看ssl时候成功<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#注意这里是大写的V，小写的只显示版本号，这里替换后在执行 -V命令如果提示权限不足，先给这个nginx文件提升下权限   chmod 111 nginx</span><br><span class="line">./nginx -V  </span><br><span class="line">#可以看到这里出现了configure arguments: --with-http_ssl_module   证明已经安装成功</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="配置ssl证书"><a href="#配置ssl证书" class="headerlink" title="配置ssl证书"></a>配置ssl证书</h1><p>解压缩下载好的证书（证书一般是pem文件和key文件，这里名字可以随便改）</p><p>将下载好的证书上上传到服务器，我将证书放在了root目录下的card文件夹，主要是key和pem文件<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#在root目录下创建card文件夹</span><br><span class="line">cd /root</span><br><span class="line">mkdir card</span><br></pre></td></tr></table></figure></p><h1 id="进行nginx-conf配置"><a href="#进行nginx-conf配置" class="headerlink" title="进行nginx.conf配置"></a>进行nginx.conf配置</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/locla/nginx/conf</span><br><span class="line">#修改nginx.conf文件</span><br><span class="line">vim nginx.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要改下面https</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /home/www/website;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   /home/www/website;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       443 ssl http2;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        ssl_certificate      /root/card/yolozzy.online_nginx/yolozzy.online_bundle.pem;</span><br><span class="line"></span><br><span class="line">        ssl_certificate_key  /root/card/yolozzy.online_nginx/yolozzy.online.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /home/www/website;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br><span class="line">./nginx -s stop</span><br><span class="line">./nginx </span><br></pre></td></tr></table></figure><p>配置过启动脚本<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">启动service nginx start</span><br><span class="line">停止service nginx stop</span><br><span class="line">重启service nginx reload</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 搭建个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nginx </tag>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown相关</title>
      <link href="/2025/05/14/markdown%E7%9B%B8%E5%85%B3/"/>
      <url>/2025/05/14/markdown%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<ol><li><p>关于markdown换行</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">床前明月光，<span class="language-xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span>疑是地上霜</span><br></pre></td></tr></table></figure></li><li><blockquote><p>关于markdown字体颜色</p><p><a href="https://blog.csdn.net/u012028275/article/details/115445362">【Markdown笔记】设置字体颜色_markdown字体颜色-CSDN博客</a></p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指向类成员的指针</title>
      <link href="/2025/05/14/%E6%8C%87%E5%90%91%E7%B1%BB%E6%88%90%E5%91%98%E7%9A%84%E6%8C%87%E9%92%88/"/>
      <url>/2025/05/14/%E6%8C%87%E5%90%91%E7%B1%BB%E6%88%90%E5%91%98%E7%9A%84%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="指向类成员的指针"><a href="#指向类成员的指针" class="headerlink" title="指向类成员的指针"></a>指向类成员的指针</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;call Test::func&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">static_func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Test::static_func&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ma; <span class="comment">//普通成员依赖于对象</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> mb;  <span class="comment">//静态成员不依赖于对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Test::mb=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Test t1;</span><br><span class="line">    Test *t2=<span class="keyword">new</span> <span class="built_in">Test</span>();    <span class="comment">//堆内存管理</span></span><br><span class="line">    <span class="comment">//int a=10; int *p=&amp;a; *p=30;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> Test::*p=&amp;Test::ma; <span class="comment">//无法从int Test:: * 转换为 int *</span></span><br><span class="line">    t<span class="number">1.</span>*p=<span class="number">20</span>;</span><br><span class="line">    t2-&gt;*p=<span class="number">30</span>;</span><br><span class="line">    <span class="keyword">delete</span> t2;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *p1=&amp;Test::mb;  <span class="comment">//静态成员变量不依赖对象</span></span><br><span class="line">    *p1=<span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在C++中，成员指针是一种特殊的指针类型，它指向类的成员（可以是数据成员或成员函数），而不是指向内存地址。成员指针需要与特定的对象实例结合使用，才能真正访问或修改该对象的成员。</p><h1 id="指向成员方法的指针"><a href="#指向成员方法的指针" class="headerlink" title="指向成员方法的指针"></a>指向成员方法的指针</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;call Test::func&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">static_func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Test::static_func&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ma; <span class="comment">//普通成员依赖于对象</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> mb;  <span class="comment">//静态成员不依赖于对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Test::mb=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Test t1;</span><br><span class="line">    Test *t2=<span class="keyword">new</span> <span class="built_in">Test</span>();</span><br><span class="line">    <span class="built_in">void</span>(Test::*pfunc)()=&amp;Test::func;   <span class="comment">//指向成员方法的指针</span></span><br><span class="line">    (t<span class="number">1.</span>*pfunc)();</span><br><span class="line">    (t2-&gt;*pfunc)(); <span class="comment">//普通成员方法依赖于对象</span></span><br><span class="line">    <span class="comment">//如何定义函数指针指向类的static成员方法</span></span><br><span class="line">    <span class="comment">//static成员方法不依赖于对象</span></span><br><span class="line">    <span class="built_in">void</span>(*pfunc2)() = &amp;Test::static_func;   <span class="comment">//定义成员方法指针</span></span><br><span class="line">    (*pfunc2)();    <span class="comment">//调用成员方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>静态成员变量是在类的所有对象之间共享的变量，它们存储在数据段中</li><li>静态成员函数不依赖于具体的对象实例，因此它们的指针类型不需要包含类类型的限定符<br>即静态的指针不需要类型限定符</li></ol><p>普通指针（如 int <em> p）可以用于指向静态成员变量，因为静态成员变量属于类本身，而不是某个特定的对象实例。<br>成员指针（如 int Test::</em> p）用于指向类的非静态成员变量或成员函数，并且需要与具体的对象实例结合使用。它们不适合用于指向静态成员变量。</p><p>成员函数指针指向某个成员方法：<br>void(Test::*pfunc)()=&amp;Test::func;</p>]]></content>
      
      
      <categories>
          
          <category> c++初级学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成员指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>掌握类的各种成员方法及区别</title>
      <link href="/2025/05/14/%E6%8E%8C%E6%8F%A1%E7%B1%BB%E7%9A%84%E5%90%84%E7%A7%8D%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E5%8F%8A%E5%8C%BA%E5%88%AB/"/>
      <url>/2025/05/14/%E6%8E%8C%E6%8F%A1%E7%B1%BB%E7%9A%84%E5%90%84%E7%A7%8D%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E5%8F%8A%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="掌握类的各种成员方法及区别"><a href="#掌握类的各种成员方法及区别" class="headerlink" title="掌握类的各种成员方法及区别"></a>掌握类的各种成员方法及区别</h1><p>普通的成员方法</p><ol><li>属于类的作用域</li><li>需要有对象才能调用该方法</li><li>可以访问任意private成员变量</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CDate</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CDate</span>(<span class="type">int</span> y,<span class="type">int</span> m,<span class="type">int</span> d):   </span><br><span class="line">    &#123;</span><br><span class="line">        _year=y;</span><br><span class="line">        _month=m;</span><br><span class="line">        _day=d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;_year&lt;&lt;<span class="string">&quot;/&quot;</span>&lt;&lt;month&lt;&lt;<span class="string">&quot;/&quot;</span>&lt;&lt;_day&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _year,_month,_day;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CGoods</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CGoods</span>(<span class="type">const</span> <span class="type">char</span> *n,<span class="type">int</span> a,<span class="type">double</span> p,<span class="type">int</span> y,<span class="type">int</span> m,<span class="type">int</span> d)</span><br><span class="line">    :_date(y,m,d)   </span><br><span class="line">    ,_price(p)       </span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">strcpy</span>(_name,n); </span><br><span class="line">        _amount=a; </span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="comment">//普通的成员方法，CGoods *this</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;_name:&quot;</span>&lt;&lt;_name&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;amount:&quot;</span>&lt;&lt;_amount&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;price:&quot;</span>&lt;&lt;_price&lt;&lt;endl;</span><br><span class="line">        _date.<span class="built_in">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span><span class="type">const</span> <span class="comment">//常成员方法，const CGoods *this，普通成员方法的重载</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;_name:&quot;</span>&lt;&lt;_name&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;amount:&quot;</span>&lt;&lt;_amount&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;price:&quot;</span>&lt;&lt;_price&lt;&lt;endl;</span><br><span class="line">        _date.<span class="built_in">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">showCGCount</span><span class="params">()</span>   <span class="comment">//静态成员方法，无this指针</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;_count:&quot;</span>&lt;&lt;_count&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span> _name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> _amount;</span><br><span class="line">    <span class="type">double</span> _price;</span><br><span class="line">    CDate _date;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> _count;  </span><br><span class="line">    <span class="comment">//不属于对象，而是属于类级别的声明</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//static成员变量一定要在类外进行定义并初始化</span></span><br><span class="line"><span class="type">int</span> CGoods::_count=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">CGoods <span class="title">g1</span><span class="params">(<span class="string">&quot;apple&quot;</span>,<span class="number">10</span>,<span class="number">5.5</span>,<span class="number">2025</span>,<span class="number">3</span>,<span class="number">5</span>)</span></span>;</span><br><span class="line">    <span class="function">CGoods <span class="title">g2</span><span class="params">(<span class="string">&quot;banana&quot;</span>,<span class="number">20</span>,<span class="number">6.5</span>,<span class="number">2025</span>,<span class="number">3</span>,<span class="number">5</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">const</span> CGoods <span class="title">g3</span><span class="params">(<span class="string">&quot;orange&quot;</span>,<span class="number">30</span>,<span class="number">7.5</span>,<span class="number">2025</span>,<span class="number">3</span>,<span class="number">5</span>)</span></span>;</span><br><span class="line">    g<span class="number">1.</span><span class="built_in">showCGCount</span>();</span><br><span class="line">    g<span class="number">2.</span><span class="built_in">showCGCount</span>();       <span class="comment">//普通成员方法用对象调用，调用时参数自动加上this指针</span></span><br><span class="line">    CGoods::<span class="built_in">showCGCount</span>();  <span class="comment">//静态成员方法用类调用，无需对象，无需this指针</span></span><br><span class="line">    g<span class="number">3.</span><span class="built_in">show</span>();  <span class="comment">//若无常成员方法，这个报错</span></span><br><span class="line">    <span class="comment">//常对象调用普通方法</span></span><br><span class="line">    <span class="comment">//this指针:const CGgoods *g3-&gt;CGoods</span></span><br><span class="line">    <span class="comment">//这是不行的，</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只要是只读操作的成员方法，一律实现成const常成员方法，这样普通成员与常成员都能调用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>const成员方法-&gt;const CGoods *this</p><ol><li>属于类的作用域</li><li>调用依赖一个对象，但普通对象与常对象都可以</li><li>const只能读不能写</li></ol><p>普通成员方法-&gt;CGoods *this</p><ol><li>属于类的作用域</li><li>调用依赖一个对象</li></ol><p>静态成员方法-&gt;不会生成this指针<br>可以访问任意对象的static私有成员变量</p>]]></content>
      
      
      <categories>
          
          <category> c++初级学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类的成员方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造函数和析构函数</title>
      <link href="/2025/05/14/%E6%8E%8C%E6%8F%A1%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
      <url>/2025/05/14/%E6%8E%8C%E6%8F%A1%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h1><h2 id="oop实现顺序栈"><a href="#oop实现顺序栈" class="headerlink" title="oop实现顺序栈"></a>oop实现顺序栈</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SeqStack</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> :</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> size=<span class="number">10</span>)</span>  <span class="comment">//形参默认值</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            _pstack = <span class="keyword">new</span> <span class="type">int</span>[size];   </span><br><span class="line">            _top = <span class="number">-1</span>;</span><br><span class="line">            _size = size;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pstack;  <span class="comment">//delete[]</span></span><br><span class="line">            _pstack = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">full</span>())</span><br><span class="line">             <span class="built_in">resize</span>();</span><br><span class="line">            _pstack[++_top] = val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">empty</span>())</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">            --_top;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _pstack[_top];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _top == <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _top == _size - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> : <span class="comment">//先看属性，写成私有</span></span><br><span class="line">        <span class="type">int</span> *_pstack;  <span class="comment">//指针，写成指针内存可增长</span></span><br><span class="line">        <span class="type">int</span> _top;       <span class="comment">//栈顶</span></span><br><span class="line">        <span class="type">int</span> _size;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">()</span>   <span class="comment">//扩容</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="type">int</span> *ptmp = <span class="keyword">new</span> <span class="type">int</span>[_size * <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= _top; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                ptmp[i] = _pstack[i];</span><br><span class="line">            &#125;   <span class="comment">//memcpy（ptmp,_pstack,_size*sizeof(int)）</span></span><br><span class="line">            <span class="comment">//realloc  此处int内存拷贝可以，但对象时不合适</span></span><br><span class="line">            <span class="keyword">delete</span> [] _pstack;</span><br><span class="line">            _pstack = ptmp;</span><br><span class="line">            size *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SeqStack s;</span><br><span class="line">    s.<span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        s.<span class="built_in">push</span>(<span class="built_in">rand</span>()%<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!s.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    s.<span class="built_in">release</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="构造函数和析构函数-1"><a href="#构造函数和析构函数-1" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h2><p>函数的名字和类名一样，无返回值<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SeqStack</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> :</span><br><span class="line">    <span class="comment">//构造函数可带参数，可以有多个重载</span></span><br><span class="line">        <span class="built_in">SeqStack</span>(<span class="type">int</span> size=<span class="number">10</span>)  <span class="comment">//不用init了</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="keyword">this</span>&lt;&lt;<span class="string">&quot;SeqStack()&quot;</span>&lt;&lt;endl;</span><br><span class="line">            _pstack = <span class="keyword">new</span> <span class="type">int</span>[size];  </span><br><span class="line">            _top = <span class="number">-1</span>;</span><br><span class="line">            _size = size;</span><br><span class="line">        &#125;</span><br><span class="line">        ~<span class="built_in">SeqStack</span>()  <span class="comment">//析构函数，只能有一个，不带参数</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="keyword">this</span>&lt;&lt;<span class="string">&quot;~SeqStack()&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">delete</span> [] _pstack; </span><br><span class="line">            _pstack = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">full</span>())</span><br><span class="line">             <span class="built_in">resize</span>();</span><br><span class="line">            _pstack[++_top] = val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">empty</span>())</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">            --_top;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _pstack[_top];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _top == <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _top == _size - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> : <span class="comment">//先看属性，写成私有</span></span><br><span class="line">        <span class="type">int</span> *_pstack;  <span class="comment">//指针，写成指针内存可增长</span></span><br><span class="line">        <span class="type">int</span> _top;       <span class="comment">//栈顶</span></span><br><span class="line">        <span class="type">int</span> _size;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">()</span>   <span class="comment">//扩容</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="type">int</span> *ptmp = <span class="keyword">new</span> <span class="type">int</span>[_size * <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= _top; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                ptmp[i] = _pstack[i];</span><br><span class="line">            &#125;   <span class="comment">//memcpy（ptmp,_pstack,_size*sizeof(int)）</span></span><br><span class="line">            <span class="comment">//realloc  此处int内存拷贝可以，但对象时不合适</span></span><br><span class="line">            <span class="keyword">delete</span> [] _pstack;</span><br><span class="line">            _pstack = ptmp;</span><br><span class="line">            size *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">SeqStack gs;    <span class="comment">//全局变量，最后析构</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SeqStack *ps = <span class="keyword">new</span> <span class="built_in">SeqStack</span>(<span class="number">60</span>);</span><br><span class="line">    <span class="comment">//这种不会自己析构</span></span><br><span class="line">    <span class="comment">//new=分配内存+构造函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> ps;  <span class="comment">//delete=析构+free</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个对象，1.开辟内存 2.调用构造函数</span></span><br><span class="line">    SeqStack s;</span><br><span class="line">    <span class="comment">//s.init();</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        s.<span class="built_in">push</span>(<span class="built_in">rand</span>()%<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!s.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">SeqStack <span class="title">s1</span><span class="params">(<span class="number">50</span>)</span></span>;    <span class="comment">//先构造后析构</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//析构函数会自动调用</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> c++初级学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 构造函数与析构函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在多端上同步部署hexo</title>
      <link href="/2025/05/14/%E5%9C%A8%E5%A4%9A%E7%AB%AF%E4%B8%8A%E5%90%8C%E6%AD%A5%E9%83%A8%E7%BD%B2hexo/"/>
      <url>/2025/05/14/%E5%9C%A8%E5%A4%9A%E7%AB%AF%E4%B8%8A%E5%90%8C%E6%AD%A5%E9%83%A8%E7%BD%B2hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="在多端上同步部署hexo"><a href="#在多端上同步部署hexo" class="headerlink" title="在多端上同步部署hexo"></a>在多端上同步部署hexo</h1><p>参考<a href="https://blog.csdn.net/K1052176873/article/details/122879462">https://blog.csdn.net/K1052176873/article/details/122879462</a></p><h2 id="1-在GitHub上新建分支hexo，且设置为默认"><a href="#1-在GitHub上新建分支hexo，且设置为默认" class="headerlink" title="1. 在GitHub上新建分支hexo，且设置为默认"></a>1. 在GitHub上新建分支hexo，且设置为默认</h2><p><img src="https://cdn.jsdelivr.net/gh/yolo-zzy/Image/image-20250205103226633.png" alt="image-20250205103226633"></p><h2 id="2-将Github仓库中hexo分支的文件clone到本地"><a href="#2-将Github仓库中hexo分支的文件clone到本地" class="headerlink" title="2. 将Github仓库中hexo分支的文件clone到本地"></a>2. 将Github仓库中hexo分支的文件clone到本地</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:yolo-zzy/yolo-zzy.github.io.git</span><br></pre></td></tr></table></figure><p>即clone仓库地址</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/yolo-zzy/Image/image-20250205120051048.png" alt="image-20250205120051048"></h2><p>拉取（同步？）远端仓库中的文件到本地<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></p><h2 id="3-修改后提交到Github仓库"><a href="#3-修改后提交到Github仓库" class="headerlink" title="3.修改后提交到Github仓库"></a>3.修改后提交到Github仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;add_branch&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>注：添加hexo的环境<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure></p><h2 id="Hexo-博客同时部署到-GitHub-Page-和个人服务器"><a href="#Hexo-博客同时部署到-GitHub-Page-和个人服务器" class="headerlink" title="Hexo 博客同时部署到 GitHub Page 和个人服务器"></a>Hexo 博客同时部署到 GitHub Page 和个人服务器</h2><p>将本地yml中repo改为两个，测试能否实现同时部署两个网站</p><ol><li>github与个人服务器采用同一个ssh公钥</li><li>hexo站点yml如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">- type: git</span><br><span class="line">  repo: git@129.211.27.198:/home/git/blog.git</span><br><span class="line">  branch: master</span><br><span class="line">- type: git</span><br><span class="line">  repo: git@github.com:yolo-zzy/yolo-zzy.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 搭建个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在vscode中写c</title>
      <link href="/2025/05/14/%E5%9C%A8vscde%E4%B8%AD%E5%86%99c/"/>
      <url>/2025/05/14/%E5%9C%A8vscde%E4%B8%AD%E5%86%99c/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载mingw-w64"><a href="#1-下载mingw-w64" class="headerlink" title="1.下载mingw-w64"></a>1.下载mingw-w64</h1><p>在网盘里了<br>将bin的路径添加到path中</p><h1 id="2-VS从的中下载c-c-插件"><a href="#2-VS从的中下载c-c-插件" class="headerlink" title="2. VS从的中下载c/c++插件"></a>2. VS从的中下载c/c++插件</h1><p>ctrl+shift+p -》搜索c/c++，选ui配置-》下面有个模式也要改成mingw64</p><h1 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h1><p>tasks.json中修改为这个<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&quot;-g&quot;,</span><br><span class="line">&quot;$&#123;workspaceFolder&#125;\\*.c&quot;,</span><br><span class="line">&quot;-o&quot;,</span><br><span class="line">&quot;$&#123;workspaceFolder&#125;\\$&#123;workspaceRootFolderName&#125;.exe&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="4-运行"><a href="#4-运行" class="headerlink" title="4. 运行"></a>4. 运行</h1><p>写完.c后要点右上角三角符号的运行</p>]]></content>
      
      
      <categories>
          
          <category> c++初级学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows踩坑合集</title>
      <link href="/2025/05/14/windows%E8%B8%A9%E5%9D%91%E5%90%88%E9%9B%86/"/>
      <url>/2025/05/14/windows%E8%B8%A9%E5%9D%91%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="右键链接问题"><a href="#右键链接问题" class="headerlink" title="右键链接问题"></a>右键链接问题</h1><p>参考： <a href="https://blog.csdn.net/qq_41019529/article/details/110139830">https://blog.csdn.net/qq_41019529/article/details/110139830</a></p><ol><li>regedit打开注册表，\HKEY_CLASSES_ROOT\Directory\Background\shell\</li><li>shell下新建 Git Bash here，下面再建command，Git Bash here 新建icon，值为\mingw64\share\git\git-for-windows.ico</li><li>command 改值为 C:\Program Files\Git\git-bash.exe</li></ol>]]></content>
      
      
      <categories>
          
          <category> win </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> gitbash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移除元素</title>
      <link href="/2025/05/14/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/"/>
      <url>/2025/05/14/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="移除元素-leetcode-27"><a href="#移除元素-leetcode-27" class="headerlink" title="移除元素 leetcode 27"></a>移除元素 leetcode 27</h1><p>vs中按f12，查看源码<br>题目</p><blockquote><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素。元素的顺序可能发生改变。然后返回 nums 中与 val 不同的元素的数量。</p><p>假设 nums 中不等于 val 的元素数量为 k，要通过此题，您需要执行以下操作：</p><p>更改 nums 数组，使 nums 的前 k 个元素包含不等于 val 的元素。nums 的其余元素和 nums 的大小并不重要。<br>返回 k。</p></blockquote><ol><li>暴力解<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=nums.<span class="built_in">size</span>()<span class="number">-1</span>;i++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]==val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;=nums.<span class="built_in">size</span>()<span class="number">-1</span>;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i==nums.<span class="built_in">size</span>()<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">                nums[j<span class="number">-1</span>]=nums[j];  </span><br><span class="line">            &#125;</span><br><span class="line">            nums.<span class="built_in">pop_back</span>();</span><br><span class="line">            i--;    <span class="comment">//此处很关键</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> nums.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>ps: 即erase库函数<br><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250307212921.png" alt="20250307212921"><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= nums.<span class="built_in">size</span>() - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == val)</span><br><span class="line">            &#123;</span><br><span class="line">                nums.<span class="built_in">erase</span>(nums.<span class="built_in">begin</span>()+i); <span class="comment">//begin返回的是迭代器</span></span><br><span class="line">                i--;    <span class="comment">//erase函数会改变数组长度，所以i--</span></span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> nums.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><ol><li>双指针解<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> fast=<span class="number">0</span>;fast&lt;=nums.<span class="built_in">size</span>()<span class="number">-1</span>;fast++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[fast]!=val)</span><br><span class="line">        &#123;</span><br><span class="line">            nums[slow]=nums[fast];</span><br><span class="line">            slow++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移除元素 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习复数类CComplex</title>
      <link href="/2025/05/14/%E5%AD%A6%E4%B9%A0%E5%A4%8D%E6%95%B0%E7%B1%BBCComplex/"/>
      <url>/2025/05/14/%E5%AD%A6%E4%B9%A0%E5%A4%8D%E6%95%B0%E7%B1%BBCComplex/</url>
      
        <content type="html"><![CDATA[<h1 id="学习复数类CComplex"><a href="#学习复数类CComplex" class="headerlink" title="学习复数类CComplex"></a>学习复数类CComplex</h1><h2 id="C-运算符重载："><a href="#C-运算符重载：" class="headerlink" title="C++运算符重载："></a>C++运算符重载：</h2><p>使对象的运算表现和编译器内置类型一样<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果T为对象，无法相加，需要重载运算符 a.operator+(b)</span></span><br></pre></td></tr></table></figure></p><p>复数类<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CComplex</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//CComplex();CComplex(1)给左边;CComplex(1,1);这三个都成立</span></span><br><span class="line">    <span class="built_in">CComplex</span>(<span class="type">int</span> r=<span class="number">0</span>,<span class="type">int</span> i=<span class="number">0</span>)</span><br><span class="line">    :<span class="built_in">mreal</span>(r),<span class="built_in">mimag</span>(i)  <span class="comment">//初始化列表</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//指导编译器怎么做CComplex类的加法运算</span></span><br><span class="line"></span><br><span class="line">    CComplex <span class="keyword">operator</span>+(<span class="type">const</span> CComplex &amp;src)</span><br><span class="line">    &#123;</span><br><span class="line">        CComplex comp;</span><br><span class="line">        comp.mreal = <span class="keyword">this</span>-&gt;meral+src.mreal;</span><br><span class="line">        comp.mimag = <span class="keyword">this</span>-&gt;mimag+src.mimag;</span><br><span class="line">        <span class="keyword">return</span> comp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;mreal&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;mimag&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    CComplex <span class="keyword">operator</span>++(<span class="type">int</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        CComplex comp=*<span class="keyword">this</span>;</span><br><span class="line">        mreal+=<span class="number">1</span>;</span><br><span class="line">        mimage+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> comp;    <span class="comment">//返回新建的不变的</span></span><br><span class="line">    &#125;</span><br><span class="line">    CComplex <span class="keyword">operator</span>++()</span><br><span class="line">    &#123;</span><br><span class="line">        mreal+=<span class="number">1</span>;</span><br><span class="line">        mimage+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;   <span class="comment">//返回加了1的旧址</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>: </span><br><span class="line">    <span class="type">int</span> mreal;</span><br><span class="line">    <span class="type">int</span> mimag;</span><br><span class="line">    <span class="keyword">friend</span> CComplex <span class="keyword">operator</span>+(<span class="type">const</span> CComplex &amp;lhs,<span class="type">const</span> CComplex &amp;rhs);<span class="comment">//友元函数可以访问私有</span></span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os,<span class="type">const</span> CComplex &amp;c);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//这是全局的，lhs.mreal访问不了私有，可以定义友元</span></span><br><span class="line">CComplex <span class="keyword">operator</span>+(<span class="type">const</span> CComplex &amp;lhs,<span class="type">const</span> CComplex &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CComplex</span>(lhs.mreal+rhs.mreal,lhs.mimag+rhs.mimag);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">CComplex <span class="title">c1</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">CComplex <span class="title">c2</span><span class="params">(<span class="number">3</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="comment">// c1.operator+(c2); 加法运算符的重载函数</span></span><br><span class="line">    CComplex c3 = c1 + c2;</span><br><span class="line">    <span class="comment">//在类中没有找到对应的，在全局中找</span></span><br><span class="line">    CComplex c4 = <span class="number">10</span>+c1;</span><br><span class="line">    CComplex c5 = c1++; <span class="comment">//++是单目运算符，operator++()前置++，operator++(int)后置++</span></span><br><span class="line">    c<span class="number">1.</span><span class="built_in">show</span>();</span><br><span class="line">    c<span class="number">5.</span><span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(T a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl; <span class="comment">//a若是int无问题，若a是别的自定义类，会报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局,cout重写</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out,<span class="type">const</span> CComplex &amp;src)</span><br><span class="line">&#123;</span><br><span class="line">    out&lt;&lt;<span class="string">&quot;mreal:&quot;</span>&lt;&lt;src.mreal&lt;&lt;<span class="string">&quot;mimage:&quot;</span>&lt;&lt;src.mimage&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重写cin</span></span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; in, CComplex&amp; c)</span><br><span class="line">&#123;</span><br><span class="line">    in &gt;&gt; c.mreal &gt;&gt; c.mimag;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++初级学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复数类CComplex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相关快捷键</title>
      <link href="/2025/05/14/%E7%9B%B8%E5%85%B3%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2025/05/14/%E7%9B%B8%E5%85%B3%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<ol><li><p>vscode在资源管理器中进行查询 vscode 查找文件名 </p><blockquote><p>ctrl + P</p></blockquote></li><li><p>查询cpu核数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmd</span><br><span class="line">wmic</span><br><span class="line">cpu get NumberOfCores</span><br></pre></td></tr></table></figure></li><li><p>ubuntu中打开终端<br>CTRL+ALT+T</p></li><li><p>nano<br>清空一行 ctrl k</p></li><li><p>如何在github上用vscode看源码:<br>&gt;</p><blockquote><ol><li>.在线vscode：仓库详情界面按下“。”键</li><li>在线运行项目 在项目地址前加上<code>gitpod.io/#/</code>前缀 登陆： 加载： 运行</li></ol></blockquote></li><li><p>vscode打开终端</p><blockquote><p>ctrl+shift+`</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 快捷键 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构面试</title>
      <link href="/2025/05/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%9D%A2%E8%AF%95/"/>
      <url>/2025/05/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="算法的定义"><a href="#算法的定义" class="headerlink" title="算法的定义"></a>算法的定义</h3><p>解决特定问题步骤的描述<br>形式有：伪代码，文字描述</p><h3 id="算法的基本特征"><a href="#算法的基本特征" class="headerlink" title="算法的基本特征"></a>算法的基本特征</h3><ol><li>输入输出</li><li>有穷性</li><li>确定性</li><li>可行性</li></ol><h3 id="算法要求"><a href="#算法要求" class="headerlink" title="算法要求"></a>算法要求</h3><ol><li>正确性</li><li>可读性</li><li>健壮性</li></ol><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归的本质：自己调用自己</p><h3 id="系统栈的作用"><a href="#系统栈的作用" class="headerlink" title="系统栈的作用"></a>系统栈的作用</h3><ol><li>保存上下文</li><li>传递参数</li><li>保存临时变量  栈帧</li></ol><h3 id="递归与动态规划"><a href="#递归与动态规划" class="headerlink" title="递归与动态规划"></a>递归与动态规划</h3><ol><li><p>为什么需要改动态规划？<br>存在重复计算，利用缓存</p></li><li><p>什么是贪心算法？<br>迪杰斯特拉算法：每次选择最小的路径</p></li></ol><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><p>MD5 SHA</p><ol><li>单向性<br>不可逆</li><li>碰撞约束<br>相同输入，输出要相同<br>不同输入，允许碰撞，但要足够小</li><li>分布均匀</li></ol><h3 id="hash应用"><a href="#hash应用" class="headerlink" title="hash应用"></a>hash应用</h3><p>找一个大文件中相同的两行文件<br>一个2T文件，计算机的内存256MB<br>通过hash，每行进行映射，相同行的输出相同</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ol><li><p>稳定性： 鸡毛插龟壳 鸡：基数排序  毛：冒泡排序<br>插： 插入排序 龟： 归并排序</p></li><li><p>nlogn的时间复杂度： 快排，归并，堆排序</p></li><li><p>o（nlogn）不一定比o（n）快，看常数项<br><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250320175238.png" alt="20250320175238"><br>上面是基于比较的，下面不基于比较</p></li></ol><p>对全国年龄排序 计数排序<br>0-100岁 array[100]</p><h2 id="指针与引用"><a href="#指针与引用" class="headerlink" title="指针与引用"></a>指针与引用</h2><p>指针可以有多层，引用只能一层</p><h2 id="new和malloc的区别"><a href="#new和malloc的区别" class="headerlink" title="new和malloc的区别"></a>new和malloc的区别</h2><p>new=构造函数+malloc</p><h3 id="什么是栈？什么是堆？"><a href="#什么是栈？什么是堆？" class="headerlink" title="什么是栈？什么是堆？"></a>什么是栈？什么是堆？</h3><p>堆是由程序员分配的<br>栈由操作系统控制</p><p>内存泄漏: 没有free （占着茅坑不拉屎）</p><h2 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h2><p>static静态局部变量和局部变量区别<br>静态变量只初始化一次</p><h2 id="快排代码"><a href="#快排代码" class="headerlink" title="快排代码"></a>快排代码</h2><p>o（log2n）树高</p><h2 id="hashmap"><a href="#hashmap" class="headerlink" title="hashmap"></a>hashmap</h2><p>拉链法 </p><h2 id="广度优先和深度优先"><a href="#广度优先和深度优先" class="headerlink" title="广度优先和深度优先"></a>广度优先和深度优先</h2>]]></content>
      
      
      <categories>
          
          <category> 南航面试复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++STL向量容量vector代码</title>
      <link href="/2025/05/14/%E5%AE%9E%E7%8E%B0C++STL%E5%90%91%E9%87%8F%E5%AE%B9%E9%87%8Fvector%E4%BB%A3%E7%A0%81/"/>
      <url>/2025/05/14/%E5%AE%9E%E7%8E%B0C++STL%E5%90%91%E9%87%8F%E5%AE%B9%E9%87%8Fvector%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="C-STL向量容量vector代码"><a href="#C-STL向量容量vector代码" class="headerlink" title="C++STL向量容量vector代码"></a>C++STL向量容量vector代码</h1><p>容器： SeqStack Queue vector<br><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250307191032.png" alt="20250307191032"><br>last是最后一个元素，end是最后一个空间<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">vector</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>(<span class="type">int</span> size=<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _first = <span class="keyword">new</span> T[size];</span><br><span class="line">        _last = _first;</span><br><span class="line">        _end = _first + size;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">vector</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> [] _first;</span><br><span class="line">        _first = _last = _end = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>(<span class="type">const</span> vector&lt;T&gt; &amp;v)</span><br><span class="line">    &#123;</span><br><span class="line">        _first = <span class="keyword">new</span> T[v._end - v._first];</span><br><span class="line">        <span class="type">int</span> len = v._last - v._first;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            _first[i] = v._first[i];</span><br><span class="line">        &#125;</span><br><span class="line">        _last = _first + len;</span><br><span class="line">        _end = _first + (v._end - v._first);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;T&gt; &amp;<span class="keyword">operator</span>=(<span class="type">const</span> vector&lt;T&gt; &amp;v)    <span class="comment">//赋值构造，两个对象已存在</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> == &amp;v)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> [] _first;</span><br><span class="line">                _first = <span class="keyword">new</span> T[v._end - v._first];</span><br><span class="line">        <span class="type">int</span> len = v._last - v._first;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            _first[i] = v._first[i];</span><br><span class="line">        &#125;</span><br><span class="line">        _last = _first + len;</span><br><span class="line">        _end = _first + (v._end - v._first);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> T &amp;x)</span>  <span class="comment">//向容器末尾增加元素</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">full</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">expand</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        *_last++ = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span>     <span class="comment">//删除容器末尾元素</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_last == _first)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; *(_last<span class="number">-1</span>) &lt;&lt; std::endl;</span><br><span class="line">        _last--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">back</span><span class="params">()</span><span class="type">const</span>       <span class="comment">//返回容器末尾元素</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> *(_last<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">()</span><span class="type">const</span></span>&#123;<span class="keyword">return</span> _last == _end;&#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span><span class="type">const</span></span>&#123;<span class="keyword">return</span> _last == _first;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span><span class="type">const</span></span>&#123;<span class="keyword">return</span> _last - _first;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        T *_first;</span><br><span class="line">        T *_last;</span><br><span class="line">        T *_end;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">expand</span><span class="params">()</span>       <span class="comment">//空间不足时，扩展容器</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">        T* tmp = <span class="keyword">new</span> T[_end - _first];</span><br><span class="line">        <span class="type">int</span> len = _last - _first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp[i] = _first[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[] _first;</span><br><span class="line">        _first = <span class="keyword">new</span> T[(_end - _first) * <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            _first[i] = tmp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        _last = _first + len;</span><br><span class="line">        _end = _first + (_end - _first) * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">delete</span>[] tmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>你遇到的错误 C2872 “vector”: 不明确的符号 是因为在你的代码中使用了 using namespace std;，这导致编译器在解析 vector 时无法区分你是想使用标准库中的 std::vector 还是你自己定义的 vector 类。</p><p>此时我们实现的vector与库的vector区别在于：容器的空间配置器</p>]]></content>
      
      
      <categories>
          
          <category> c++初级学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全面掌握const</title>
      <link href="/2025/05/14/%E5%85%A8%E9%9D%A2%E6%8E%8C%E6%8F%A1const/"/>
      <url>/2025/05/14/%E5%85%A8%E9%9D%A2%E6%8E%8C%E6%8F%A1const/</url>
      
        <content type="html"><![CDATA[<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">a=<span class="number">20</span>;<span class="comment">//a为左值,可被修改</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> b=<span class="number">20</span>;</span><br><span class="line">b=<span class="number">30</span>;<span class="comment">//这里会报错，const被初始化后不能被修改</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c中</p><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a=<span class="number">20</span>;<span class="comment">//const 修饰的量，可以不初始化</span></span><br><span class="line"><span class="comment">//不叫常量，叫常变量</span></span><br><span class="line"><span class="comment">//int array[a]=&#123;&#125;;这里想要初始化一个全0，长度为a的数组</span></span><br><span class="line"><span class="comment">//int a=10; int array[a];这会报错</span></span><br><span class="line"><span class="comment">//因为a是个变量</span></span><br><span class="line"><span class="type">int</span> *p=(<span class="type">int</span>*)&amp;a;<span class="comment">//int *p=&amp;a,破坏了a的常量性</span></span><br><span class="line"><span class="comment">//（int*）把a从常量强转了，因此可以，即p是指向a的指针</span></span><br><span class="line">*p=<span class="number">30</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>,a,*p,*(&amp;a));<span class="comment">//30，30，30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><p>c++的const必须初始化，是常量，不是变量<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a=<span class="number">20</span>；</span><br><span class="line"><span class="type">int</span> *p=(<span class="type">int</span>*)&amp;a;</span><br><span class="line">*p=<span class="number">30</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>,a,*p,*(&amp;a));<span class="comment">//20 30 20</span></span><br><span class="line"><span class="comment">//c中const为一个变量</span></span><br><span class="line"><span class="comment">//c++中，所有const a 都被值 20 替换！</span></span><br><span class="line"><span class="comment">//这里a内存上确实被修改了，但是在printf之前，编译器已经将所有的关于a的都被替换成20了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> b=<span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a=b;</span><br><span class="line"><span class="comment">//这里又变成常变量</span></span><br><span class="line"><span class="type">int</span>* p = (<span class="type">int</span>*)&amp;a;</span><br><span class="line">*p = <span class="number">30</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, a, *p, *(&amp;a));<span class="comment">//303030</span></span><br><span class="line">b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, a, *p, b);<span class="comment">//注：这里a还是20，因为ab其实没啥关系</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>总结：分清常量与常变量<br>常量从地址角度分析，常变量从编译替换角度分析</p><h1 id="const和指针的结合"><a href="#const和指针的结合" class="headerlink" title="const和指针的结合"></a>const和指针的结合</h1><p>const修饰的是离他最近的<strong>类型</strong></p><h2 id="const和一级指针的结合"><a href="#const和一级指针的结合" class="headerlink" title="const和一级指针的结合"></a>const和一级指针的结合</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *p;</span><br><span class="line"><span class="comment">//const修饰 int，const 修饰*p, *p不能再改了,但是p可以修改</span></span><br><span class="line"><span class="comment">//即指针可以指向不同，但其值不变</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="type">const</span> *p;</span><br><span class="line"><span class="comment">//const 修饰 int类型，const修饰*p</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p;</span><br><span class="line"><span class="comment">//const 修饰int *,const修饰p，即p指向地址不变，但*p即其值可变</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">const int a=10;</span><br><span class="line">//想要定义一个指针指向a；</span><br><span class="line">int const *p=&amp;a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int *q1=nullptr;</span><br><span class="line">int *const q2=nulptr;</span><br><span class="line">cout&lt;&lt;typeid(q1).name()&lt;&lt;endl;//int *</span><br><span class="line">cout&lt;&lt;typeid(q2).name()&lt;&lt;endl;//int *</span><br><span class="line">//const若右边没有*，则const不参与类型</span><br><span class="line">int a=10;</span><br><span class="line">int *p1=&amp;a;</span><br><span class="line">const int *p2=&amp;a;//这里const int*&lt;=int *  是可以的</span><br><span class="line">int *const p3=&amp;a;//int *&lt;=int * 也是可以的</span><br><span class="line">int *p4=p3;//p3是int *,不是int * const</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a=10;</span><br><span class="line">const int *p=&amp;a;</span><br><span class="line">int *q=p;//int *&lt;=const int *,这里const右边又*</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="comment">//int *p=&amp;a;      int *=const int *  ??</span></span><br><span class="line"><span class="comment">//const和指针结合</span></span><br><span class="line"><span class="comment">//1.常量不能作为左值&lt;=试图直接修改const  </span></span><br><span class="line"><span class="comment">//2.不能把常量的地址泄露给一个普通的指针或引用变量&lt;=试图间接修改const   *p=30;?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const与二级指针的结合"><a href="#const与二级指针的结合" class="headerlink" title="const与二级指针的结合"></a>const与二级指针的结合</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a=10;</span><br><span class="line">int *p=&amp;a;</span><br><span class="line">const int **q=&amp;p;</span><br><span class="line">//const右边有指针，类型要考虑进去</span><br><span class="line">//即const int**&lt;=int **</span><br><span class="line">//这是错误的</span><br><span class="line">/*</span><br><span class="line">理解:const int **q指向a,不允许修改,但*p却有可能修改</span><br><span class="line">即可以通过*p修改**q,这是错误的,常量地址放在普通指针中</span><br><span class="line">*/</span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改如下:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a=10;</span><br><span class="line">const int *p=&amp;a;//p不是普通指针了</span><br><span class="line">const int **q=&amp;p;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>或者<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int a=10;</span><br><span class="line">int *p=&amp;a;</span><br><span class="line">const int *const *q=&amp;p;//把*q限定,也是可以的</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>常见二级指针的应用<img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20250109165656270.png" alt="image-20250109165656270"></p><p>1.p修改a的值<br>2.q修改a的值<br>3.q修改p的指向</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const int **q;//**q</span><br><span class="line">int *const *q;//*q</span><br><span class="line">int **const q;//q</span><br></pre></td></tr></table></figure><h3 id="指针const结合总结"><a href="#指针const结合总结" class="headerlink" title="指针const结合总结"></a>指针const结合总结</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int**&lt;=const int **  //错误</span><br><span class="line">const int **&lt;=int ** //错误,这两个是和二级指针结合</span><br><span class="line">int**&lt;=int*const* //两边同时去掉前面的int*,即*&lt;=const*,错误</span><br><span class="line">int*const*&lt;=int** //与上同理,可以的,这两个是和一级指针的结合</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++初级学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>年末小结</title>
      <link href="/2025/05/14/%E5%B9%B4%E6%9C%AB%E5%B0%8F%E7%BB%93/"/>
      <url>/2025/05/14/%E5%B9%B4%E6%9C%AB%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2024年年末小结"><a href="#2024年年末小结" class="headerlink" title="2024年年末小结"></a>2024年年末小结</h1><p>额，想把博客同时部署到github和腾讯云时，才发现出bug了。。。:(  :joy:<br>我登录腾讯云一直还是用账号密码登录，我起初没在意，原来只是ssh密钥压根就没设置，但今年没时间了，等明年吧。。。:0 :cry: :sob:</p><p>这两天回老家，暂时搞不了，可能要元旦结束才能继续吧。立个小目标，一直保持到过年，要加大对于leetcode和那个傻呗毕设的投入了，服了。。。（<strong> 但我不会忘记初心的，狠学C++!!! </strong> )   :sunglasses:</p><p>剩下好像没啥了，（其实今晚上感慨挺多的，一时提笔忘字）既然没想起来，说明还不是很重要，joy。。。明天还要早起，睡觉！</p><p>人真是麻烦的东西，想要吃，又怕胖；想要玩，又想睡；想要摆，又想上进。。。突然想到懒羊羊了，hhh<br>哦我想起来说啥了，</p><h2 id="1-吐槽毕设，高校"><a href="#1-吐槽毕设，高校" class="headerlink" title="1. 吐槽毕设，高校"></a>1. 吐槽毕设，高校</h2><p>傻逼玩意，我现在才知道高校里面喜欢搞的深度学习啊，机器视觉啊，除非985、211 ,不然超卷<br>C++能做后端，但是好像也很卷，哎？我是不是可以考虑java的后端<br>我那个毕设题目，基于机器学习的sdn负载均衡，是不是又要搞sdn，又要搞机器学习啊。。。你还是搞死我把，如果没有现成的代码，我可以godie了。</p><h2 id="2-节选自《邪不压正》"><a href="#2-节选自《邪不压正》" class="headerlink" title="2. 节选自《邪不压正》"></a>2. 节选自《邪不压正》</h2><blockquote><p>廖：老蒋？<br>姜：更靠不住。<br>廖：一个写日记的人？<br>姜：正经人谁写日记啊？<br>廖：是啊。<br>姜：你写日记吗？<br>廖：我不写。你写日记吗？<br>姜：谁能把心里话写日记里？<br>廖：写出来的那能叫心里话？<br>（合，碰杯）：下贱！</p></blockquote><font color="red">**正经人谁写日记啊**</font><p>:satisfied::satisfied::satisfied::satisfied::satisfied::satisfied:</p>]]></content>
      
      
      <categories>
          
          <category> 随想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随手一写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟实现string类型代码</title>
      <link href="/2025/05/14/%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0string%E7%B1%BB%E5%9E%8B%E4%BB%A3%E7%A0%81/"/>
      <url>/2025/05/14/%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0string%E7%B1%BB%E5%9E%8B%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="模拟实现string类型代码"><a href="#模拟实现string类型代码" class="headerlink" title="模拟实现string类型代码"></a>模拟实现string类型代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自己实现一个字符串对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* p=<span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p!=<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _pstr=<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(p)<span class="number">+1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(_pstr,p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            _pstr=<span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *_pstr = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] _pstr;</span><br><span class="line">        _pstr = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        _pstr=<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str._pstr)<span class="number">+1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(_pstr,str._pstr);</span><br><span class="line">    &#125;</span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>!=&amp;str)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] _pstr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pstr;</span><br><span class="line">    <span class="keyword">friend</span> String <span class="keyword">operator</span>+(<span class="type">const</span> String&amp; str1, <span class="type">const</span> String&amp; str2);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> String&amp; str1, <span class="type">const</span> String&amp; str2);</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> String&amp; str);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">String <span class="keyword">operator</span>+(<span class="type">const</span> String&amp; str1,<span class="type">const</span> String&amp; str2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *ptmp=<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str<span class="number">1.</span>_pstr)+<span class="built_in">strlen</span>(str<span class="number">2.</span>_pstr)<span class="number">+1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(ptmp,str<span class="number">1.</span>_pstr);</span><br><span class="line">    <span class="built_in">strcat</span>(ptmp,str<span class="number">2.</span>_pstr)</span><br><span class="line">    <span class="function">String <span class="title">tmp</span><span class="params">(ptmp)</span></span>;</span><br><span class="line">    <span class="keyword">delete</span>[] ptmp;  <span class="comment">//防止内存泄漏，new的一定要delete</span></span><br><span class="line">    <span class="comment">//tmp是临时变量，所以不需要delete，会自动析构</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(ptmp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> String&amp; str1,<span class="type">const</span> String&amp; str2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(str<span class="number">1.</span>_pstr,str<span class="number">2.</span>_pstr) &gt; <span class="number">0</span>;   <span class="comment">//strcmp的返回值为-1，0，1</span></span><br><span class="line">&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">    os &lt;&lt; str._pstr;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    String str1;</span><br><span class="line">    String str2 = <span class="string">&quot;aaa&quot;</span>; <span class="comment">//string(const char*)</span></span><br><span class="line">    String str3 = <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">    String str4 = str2+str3;</span><br><span class="line">    String str5 = str2+<span class="string">&quot;ccc&quot;</span>;</span><br><span class="line">    String str6 = <span class="string">&quot;ddd&quot;</span>+str2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str6:&quot;</span>&lt;&lt; str6 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (str5 &gt; str6)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;str5&lt;&lt;<span class="string">&quot;&gt;&quot;</span>&lt;&lt;str6&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;str5&lt;&lt;<span class="string">&quot;&lt;&quot;</span>&lt;&lt;str6&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len = str<span class="number">6.l</span>ength();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;str6[i]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//string转char*</span></span><br><span class="line">        <span class="comment">//string(const char *)转char*</span></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">strcpy</span>(buf,str<span class="number">6.</span><span class="built_in">c_str</span>());<span class="comment">//把str6复制到buf里</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;buf:&quot;</span>&lt;&lt;buf&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++初级学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解容器空间配置器allocator的重要性</title>
      <link href="/2025/05/14/%E7%90%86%E8%A7%A3%E5%AE%B9%E5%99%A8%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8allocator%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/"/>
      <url>/2025/05/14/%E7%90%86%E8%A7%A3%E5%AE%B9%E5%99%A8%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8allocator%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="理解容器空间配置器allocator的重要性"><a href="#理解容器空间配置器allocator的重要性" class="headerlink" title="理解容器空间配置器allocator的重要性"></a>理解容器空间配置器allocator的重要性</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> myspace</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">vector</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>(<span class="type">int</span> size=<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _first = <span class="keyword">new</span> T[size];   </span><br><span class="line">        _last = _first;</span><br><span class="line">        _end = _first + size;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">vector</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> [] _first;</span><br><span class="line">        _first = _last = _end = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>(<span class="type">const</span> vector&lt;T&gt; &amp;v)</span><br><span class="line">    &#123;</span><br><span class="line">        _first = <span class="keyword">new</span> T[v._end - v._first];</span><br><span class="line">        <span class="type">int</span> len = v._last - v._first;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            _first[i] = v._first[i];</span><br><span class="line">        &#125;</span><br><span class="line">        _last = _first + len;</span><br><span class="line">        _end = _first + (v._end - v._first);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;T&gt; &amp;<span class="keyword">operator</span>=(<span class="type">const</span> vector&lt;T&gt; &amp;v)    <span class="comment">//赋值构造，两个对象已存在</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> == &amp;v)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> [] _first;</span><br><span class="line">                _first = <span class="keyword">new</span> T[v._end - v._first];</span><br><span class="line">        <span class="type">int</span> len = v._last - v._first;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            _first[i] = v._first[i];</span><br><span class="line">        &#125;</span><br><span class="line">        _last = _first + len;</span><br><span class="line">        _end = _first + (v._end - v._first);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> T &amp;x)</span>  <span class="comment">//向容器末尾增加元素</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">full</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">expand</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        *_last++ = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span>     <span class="comment">//删除容器末尾元素</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_last == _first)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; *(_last<span class="number">-1</span>) &lt;&lt; std::endl;</span><br><span class="line">        _last--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">back</span><span class="params">()</span><span class="type">const</span>       <span class="comment">//返回容器末尾元素</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> *(_last<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">()</span><span class="type">const</span></span>&#123;<span class="keyword">return</span> _last == _end;&#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span><span class="type">const</span></span>&#123;<span class="keyword">return</span> _last == _first;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span><span class="type">const</span></span>&#123;<span class="keyword">return</span> _last - _first;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>: </span><br><span class="line">    T *_first;</span><br><span class="line">        T *_last;</span><br><span class="line">        T *_end;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">expand</span><span class="params">()</span>       </span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            T* tmp = <span class="keyword">new</span> T[_end - _first];</span><br><span class="line">        <span class="type">int</span> len = _last - _first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp[i] = _first[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[] _first;</span><br><span class="line">        _first = <span class="keyword">new</span> T[(_end - _first) * <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">           _first[i] = tmp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        _last = _first + len;</span><br><span class="line">         _end = _first + (_end - _first) * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">delete</span>[] tmp;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Test()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Test</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~Test()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;Test&gt; vec;   <span class="comment">//空容器，但输出发现构造、析构被调用很多次，因为vector构造时new把开辟加实例化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//因此需要把内存开辟与对象构造分开处理</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化：</p><ol><li>构造：把内存开辟与对象构造分开处理</li><li>析构：析构有效元素，然后释放first指针</li></ol><p>避免vector冲突<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> myspace</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">vector</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Test t1, t2, t3;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;-----------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">    myspace ::vector&lt;Test&gt; vec;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(t1);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(t2);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(t3);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    vec.<span class="built_in">pop_back</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处，发现pop时并没有释放空间<br>如何做？<br>首先，明确不能使用delete，因为delete会删除分配的内存<br>因此，pop只需要析构对象<br>将析构与内存释放分离开</p><p>delete/new：将内存的释放与创建与对象的释放与创建 两者一起完成了</p><p>我们现在要做的是将内存与对象的创建、释放分离开<br>其中内存释放不是所有对象都释放，而是有效元素的释放</p><p>allocator容器空间适配器<br>内存开辟/内存释放<br>对象构造/对象析构<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Allocator</span> <span class="comment">//库中存在allocator,这是一个模板</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">T* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> size)</span>   <span class="comment">//参数size_t 是C和C++编程语言中的一个无符号整数类型，专门用于表示内存中对象的大小或数组下标的值</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//开辟整个内存</span></span><br><span class="line">        <span class="keyword">return</span> (T*)<span class="built_in">malloc</span>(size * <span class="built_in">sizeof</span>(T));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(T* p,<span class="type">const</span> T&amp; value)</span>     <span class="comment">//构造对象</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">new</span>(p)<span class="built_in">T</span>(value); <span class="comment">//定位new，在指定位置处创建对象</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">destroy</span><span class="params">(T* p)</span>      <span class="comment">//析构元素，</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        p-&gt;~<span class="built_in">T</span>();    <span class="comment">//~T()代表T类型的的析构函数</span></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deallocate</span><span class="params">(T* p)</span>      <span class="comment">//释放内存</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">free</span>(p);    <span class="comment">//free不需要知道删除多大，会自动根据上面malloc判断</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>把allocator作为vector容器的适配器（把上面写的方法给到vector容器）<br>容器元素的内存开辟与释放，通过allocator实现<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> myspace</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> Alloc=Allocator&lt;T&gt;&gt; <span class="comment">//这后面的两个是参数列表</span></span><br><span class="line"><span class="keyword">class</span> vector</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>(<span class="type">int</span> size=<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//_first = new T[size];   </span></span><br><span class="line">        _first = _alloc.<span class="built_in">allocate</span>(size); <span class="comment">//分配内存</span></span><br><span class="line">        _last = _first;</span><br><span class="line">        _end = _first + size;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">vector</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//delete [] _first;</span></span><br><span class="line">        <span class="comment">//释放某些对象</span></span><br><span class="line">        <span class="keyword">for</span>(T *p=_first;p!=_last;p++)</span><br><span class="line">        &#123;</span><br><span class="line">            _alloc.<span class="built_in">destroy</span>(p);  <span class="comment">//析构对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        _alloc.<span class="built_in">deallocate</span>(_first);  <span class="comment">//释放的内存大小是依据上面的allocate大小</span></span><br><span class="line">        _first = _last = _end = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>(<span class="type">const</span> vector&lt;T&gt; &amp;v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//_first = new T[v._end - v._first];</span></span><br><span class="line">        <span class="comment">//拷贝构造也要修改</span></span><br><span class="line">        _first = _alloc.<span class="built_in">allocate</span>(v._end - v._first);</span><br><span class="line">        <span class="type">int</span> len = v._last - v._first;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//_first[i] = v._first[i];</span></span><br><span class="line">            _alloc.<span class="built_in">construct</span>(_first+i,v._first[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        _last = _first + len;</span><br><span class="line">        _end = _first + (v._end - v._first);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;T&gt; &amp;<span class="keyword">operator</span>=(<span class="type">const</span> vector&lt;T&gt; &amp;v)    <span class="comment">//赋值构造，两个对象已存在</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> == &amp;v)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//delete [] _first;</span></span><br><span class="line">        <span class="keyword">for</span>(T *p=_first;p!=_last;p++)</span><br><span class="line">        &#123;</span><br><span class="line">            _alloc.<span class="built_in">destroy</span>(p); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _first = _alloc.<span class="built_in">allocate</span>(v._end - v._first);</span><br><span class="line">        <span class="type">int</span> len = v._last - v._first;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//_first[i] = v._first[i];</span></span><br><span class="line">            _alloc.<span class="built_in">construct</span>(_first+i,v._first[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        _last = _first + len;</span><br><span class="line">        _end = _first + (v._end - v._first);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> T &amp;x)</span>  <span class="comment">//向容器末尾增加元素</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">full</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">expand</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        _alloc.<span class="built_in">construct</span>(_last,x);</span><br><span class="line">        _last++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span>     <span class="comment">//删除容器末尾元素</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_last == _first)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _alloc.<span class="built_in">destroy</span>(--_last);</span><br><span class="line">        <span class="comment">//如果一个容器有 n 个元素，那么 _first 到 _last - 1 是有效的元素范围，而 _last 指向的是第 n 个位置（即第 n-1 个元素之后的位置）。</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">back</span><span class="params">()</span><span class="type">const</span>       <span class="comment">//返回容器末尾元素</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> *(_last<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">()</span><span class="type">const</span></span>&#123;<span class="keyword">return</span> _last == _end;&#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span><span class="type">const</span></span>&#123;<span class="keyword">return</span> _last == _first;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span><span class="type">const</span></span>&#123;<span class="keyword">return</span> _last - _first;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>: </span><br><span class="line">        T *_first;</span><br><span class="line">        T *_last;</span><br><span class="line">        T *_end;</span><br><span class="line">        Alloc _alloc;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">expand</span><span class="params">()</span>       </span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="type">int</span> size = _end - _first;</span><br><span class="line">            T *tmp=_alloc.<span class="built_in">allocate</span>(<span class="number">2</span> * size);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;_last - _first;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                _alloc.<span class="built_in">construct</span>(tmp+i,_first[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//delete [] _first; 全部析构沟了</span></span><br><span class="line">            <span class="comment">//养成先析构想要的后再释放的好习惯</span></span><br><span class="line">            <span class="keyword">for</span>(T *p=_first;p!=_last;p++)</span><br><span class="line">            &#123;</span><br><span class="line">                _alloc.<span class="built_in">destroy</span>(p);</span><br><span class="line">            &#125;</span><br><span class="line">            _alloc.<span class="built_in">deallocate</span>(_first);</span><br><span class="line">            _first = tmp;</span><br><span class="line">            _last = _first + size;</span><br><span class="line">            _end = _first + <span class="number">2</span> * size;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Test t1, t2, t3;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;-----------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">    myspace ::vector&lt;Test&gt; vec;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(t1);  <span class="comment">//拷贝构造</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(t2);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(t3);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    vec.<span class="built_in">pop_back</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> c++初级学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> allocator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解类模板</title>
      <link href="/2025/05/14/%E7%90%86%E8%A7%A3%E7%B1%BB%E6%A8%A1%E6%9D%BF/"/>
      <url>/2025/05/14/%E7%90%86%E8%A7%A3%E7%B1%BB%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="理解类模板"><a href="#理解类模板" class="headerlink" title="理解类模板"></a>理解类模板</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//T是模板类型参数，size是非模板类型参数(都是const)，必须是整形类（包括地址与引用）</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="type">int</span> SIZE&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(T *arr)</span>   <span class="comment">//函数模板</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;SIZE<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;SIZE<span class="number">-1</span>-i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j<span class="number">+1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> temp=arr[j];</span><br><span class="line">                arr[j]=arr[j<span class="number">+1</span>];</span><br><span class="line">                arr[j<span class="number">+1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[]=&#123;<span class="number">12</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">89</span>,<span class="number">32</span>,<span class="number">21</span>,<span class="number">35</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> size=<span class="built_in">sizeof</span>(arr)/<span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">sort</span>&lt;<span class="type">int</span>,size&gt;(arr);   </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> val:arr)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;val&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SeqStack</span>  <span class="comment">//模板名称+类型参数列表=类名称</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造和析构 不用加类型参数列表，别的要加上类型参数列表</span></span><br><span class="line">    <span class="built_in">SeqStack</span>(<span class="type">int</span> size=<span class="number">10</span>)   <span class="comment">//构造函数</span></span><br><span class="line">        ：_pstack(<span class="keyword">new</span> T[size])</span><br><span class="line">        ,_top(<span class="number">0</span>)</span><br><span class="line">        ,_size(size)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    ~<span class="built_in">SeqStack</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> []_pstack;</span><br><span class="line">        _pstack=<span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">SeqStack</span>(<span class="type">const</span> SeqStack&lt;T&gt;&amp;stack)</span><br><span class="line">        :_top(stack._top)</span><br><span class="line">        ,_size(stack._size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;_top;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            _pstack[i]=stack._pstack[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    SeqStack&lt;T&gt;&amp;<span class="keyword">operator</span>=(<span class="type">const</span> SeqStack&lt;T&gt;&amp;stack)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>!=&amp;stack)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> []_pstack;</span><br><span class="line">        _pstack=<span class="keyword">new</span> T[stack._size];</span><br><span class="line">        _top=stack._top;</span><br><span class="line">        _size=stack._size;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;_top;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            _pstack[i]=stack._pstack[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T &amp;val)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _top--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">top</span><span class="params">()</span><span class="type">const</span>    <span class="comment">//对于只读，写成const,返回类型为const T</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="string">&quot;stack is empty&quot;</span>; <span class="comment">//抛出异常，不用管返回值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _pstack[_top<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _top==_size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _top==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    T *_pstack;</span><br><span class="line">    <span class="type">int</span> _top;</span><br><span class="line">    <span class="type">int</span> _size;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">expand</span><span class="params">()</span>   <span class="comment">//顺序栈底层数组按2倍的方式进行扩容</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        T *ptmp=<span class="keyword">new</span> T[_size*<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;_top;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ptmp[i]=_pstack[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> []_pstack;</span><br><span class="line">        _pstack=ptmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类外实现成员方法，前面要有类作用域，但是这里已经不认识模板了</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> SeqStack&lt;T&gt;::<span class="built_in">push</span>(<span class="type">const</span> T &amp;val)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">full</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">expand</span>();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        _pstack[_top++]=val;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    SeqStack&lt;<span class="type">int</span>&gt;stack;</span><br><span class="line">    stack.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    stack.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">    stack.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">    stack.<span class="built_in">pop</span>();</span><br><span class="line">    stack.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++初级学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解函数模板</title>
      <link href="/2025/05/14/%E7%90%86%E8%A7%A3%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF/"/>
      <url>/2025/05/14/%E7%90%86%E8%A7%A3%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="理解函数模板"><a href="#理解函数模板" class="headerlink" title="理解函数模板"></a>理解函数模板</h1><p>函数模板的意义：对类型也可以参数化<br>int sum(int a, int b) {<br>    return a + b;<br>}<br>int 定死<br>函数模板让参数类型可变</p><ol><li>函数模板         不进行编译</li><li>模板的实例化     在函数调用点编译</li><li>模板函数         需要编译</li><li>模板类型参数</li><li>模板非类型参数</li><li>模板的实参推演=&gt;模板根据实参推导函数实例</li><li>模板的特例化（专用化）</li><li>函数模板、模板的特例化、非模板函数的重载关系</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数模板，不编译</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;  <span class="comment">//定义一个模板参数列表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(T a, T b)</span> </span>&#123;    <span class="comment">//compare是一个函数模板</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;template compare&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数的调用点，编译器用用户指定的类型，从原模版实例化一份函数代码出来<br>即模板函数<br>bool compare<int>(int a, int b)<br>{<br>    return a &gt; b;<br>}<br>bool compare<double>(double a, double b)<br>{<br>    return a &gt; b;<br>}</p><p>bool compare<const char *>(const char<em> a, const char</em> b)<br>{<br>    return a &gt; b;<br>}<br>此处比较的是ab的地址大小,我们应该比较字符串的内容<br>这个根据模板推演的模板函数不是我们想要的，因此需要我们特例化<br>针对compare函数模板，提供const char*的特例化<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前面还是需要函数模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;  <span class="comment">//模板的专用化模板</span></span><br><span class="line"><span class="type">bool</span> <span class="built_in">compare</span>&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(<span class="type">const</span> <span class="type">char</span>* a, <span class="type">const</span> <span class="type">char</span>* b)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;compare&lt;const char*&gt;&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(a,b) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通函数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* a, <span class="type">const</span> <span class="type">char</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(a,b) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//函数调用点</span></span><br><span class="line">    <span class="built_in">compare</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>,<span class="number">20</span>) </span><br><span class="line">    <span class="built_in">compare</span>&lt;<span class="type">double</span>&gt;(<span class="number">10.1</span>,<span class="number">20.2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模板的实参推演=&gt;模板根据实参推导函数实例</span></span><br><span class="line">    <span class="comment">//无对应的模板函数则实例化，有则直接调用</span></span><br><span class="line">    <span class="built_in">compare</span>(<span class="number">10.1</span>,<span class="number">20.2</span>)  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//int ,double 报错，无对应的模板函数</span></span><br><span class="line">    <span class="built_in">compare</span>(<span class="number">10</span>,<span class="number">20.1</span>);</span><br><span class="line">    <span class="comment">//强制把后一个参数转为int</span></span><br><span class="line">    <span class="built_in">compare</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>,<span class="number">20.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里是模板实参推演，T const char*</span></span><br><span class="line">    <span class="built_in">compare</span>(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">    <span class="comment">//若有普通函数符合条件，优先调用普通函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于某些类型来说，依赖编译器默认实例化的模板代码，代码处理逻辑是错误的</p><p>模板的特例化（专用化）<br>不是编译器，而是开发者提供的<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;&gt;  <span class="comment">//模板的专用化</span></span><br><span class="line"><span class="type">bool</span> compare &lt;<span class="type">const</span> <span class="type">char</span>*&gt;(<span class="type">const</span> <span class="type">char</span>* a, <span class="type">const</span> <span class="type">char</span>* b)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;compare&lt;const char*&gt;&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(a,b) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="多文件"><a href="#多文件" class="headerlink" title="多文件"></a>多文件</h1><p>在多文件工程时，将函数定义放在test.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;  <span class="comment">//定义一个模板参数列表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(T a, T b)</span> </span>&#123;    <span class="comment">//compare是一个函数模板</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;template compare&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;  <span class="comment">//模板的专用化模板</span></span><br><span class="line"><span class="type">bool</span> <span class="built_in">compare</span>&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(<span class="type">const</span> <span class="type">char</span>* a, <span class="type">const</span> <span class="type">char</span>* b)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;compare&lt;const char*&gt;&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(a,b) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通函数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* a, <span class="type">const</span> <span class="type">char</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(a,b) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>test2.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模板声明</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;  <span class="comment">//定义一个模板参数列表</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(T a, T b)</span> ；</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">compare</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>,<span class="number">20</span>) </span><br><span class="line">    <span class="built_in">compare</span>&lt;<span class="type">double</span>&gt;(<span class="number">10.1</span>,<span class="number">20.2</span>)</span><br><span class="line">    <span class="built_in">compare</span>(<span class="number">10.1</span>,<span class="number">20.2</span>)  </span><br><span class="line">    <span class="built_in">compare</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>,<span class="number">20.1</span>)   </span><br><span class="line">    <span class="built_in">compare</span>(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>);   <span class="comment">//无报错</span></span><br><span class="line">    <span class="built_in">compare</span>&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>);<span class="comment">//无报错，其余都报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h1><p>模板在跨文件时，由于模板是不编译的，即使声明了模板，也找不到对应的代码<br>对于特例化的模板函数，声明了模板，就能找到<br>也不用管那么多，模板代码放在头文件中，在源文件中进行#include包含，这样源文件一定能看见模板代码</p><p>ps:也可以让编译其对模板进行实例化<br><code>c++template bool compare&lt;int&gt;(int a, int b);</code> 对这种模板函数进行实例化</p>]]></content>
      
      
      <categories>
          
          <category> c++初级学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类和对象代码应用实践</title>
      <link href="/2025/05/14/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E4%BB%A3%E7%A0%81%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5/"/>
      <url>/2025/05/14/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E4%BB%A3%E7%A0%81%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="类和对象代码应用实践"><a href="#类和对象代码应用实践" class="headerlink" title="类和对象代码应用实践"></a>类和对象代码应用实践</h1><h2 id="1-string类型"><a href="#1-string类型" class="headerlink" title="1. string类型"></a>1. string类型</h2><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250302173610.png" alt="20250302173610"></p><p>string的成员变量为指针，因此拷贝构造函数和赋值运算符重载函数都得重写。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span> *str = <span class="literal">nullptr</span>)   <span class="comment">//普通的构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>]; <span class="comment">//需要额外的1个字节来存储字符串的终止符 \0</span></span><br><span class="line">            <span class="built_in">strcpy</span>(m_data, str);    <span class="comment">//strcpy 逐字符地从源字符串复制到目标字符串，直到遇到终止符 \0（空字符）为止</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//空字符串  </span></span><br><span class="line">        &#123;</span><br><span class="line">            m_data=<span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">            *m_data=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String &amp;other)   <span class="comment">//拷贝构造函数，参数为const,防止原对象被修改</span></span><br><span class="line">    &#123;</span><br><span class="line">            m_data=<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(other.m_data)<span class="number">+1</span>];<span class="comment">//根据参数字符串的长度分配内存</span></span><br><span class="line">            <span class="built_in">strcpy</span>(m_data,other.m_data);</span><br><span class="line">    &#125;</span><br><span class="line">    String &amp;<span class="keyword">operator</span>=(<span class="type">const</span> String &amp;str)   <span class="comment">//赋值运算符重载函数，返回值类型为string&amp;是为了连续赋值</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>==&amp;str) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">delete</span>[] m_data;</span><br><span class="line">        m_data=<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(other.m_data)<span class="number">+1</span>];<span class="comment">//根据参数字符串的长度分配内存</span></span><br><span class="line">        <span class="built_in">strcpy</span>(m_data,other.m_data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">String</span>()   <span class="comment">//析构函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] m_data;</span><br><span class="line">        m_data=<span class="literal">nullptr</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span> *m_data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//调用构造函数</span></span><br><span class="line">    <span class="function">String <span class="title">str1</span><span class="params">(<span class="string">&quot;hello world&quot;</span>)</span></span>;</span><br><span class="line">    String str3;</span><br><span class="line">    <span class="comment">//调用拷贝构造函数</span></span><br><span class="line">    String str2=str1;</span><br><span class="line">    <span class="comment">//调用赋值运算符重载函数，从右往左</span></span><br><span class="line">    str3=str1=str2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-循环队列-Queue"><a href="#2-循环队列-Queue" class="headerlink" title="2. 循环队列 Queue"></a>2. 循环队列 Queue</h2><p>class Queue<br>{<br>public:<br>    Queue(int size = 20)   //构造函数<br>    {<br>        _pQue = new int[size];<br>        _front = _rear = 0;<br>        _size = size;</p><pre><code>&#125;~Queue()   //析构函数&#123;    delete[] _pQue;    _pQue = nullptr;&#125;void addQue(int val)&#123;    if(full())    &#123;        resize();    &#125;    else    &#123;        _pQue[_rear] = val;        _rear = (_rear + 1) % _size;    &#125;&#125;void pop()&#123;    if(empty())    &#123;        return;    &#125;    _front = (_front + 1) % _size;&#125;int top()   //获取队头元素&#123;    return _pQue[_front];&#125;bool empty()   //判断队列是否为空&#123;    return _front == _rear;&#125;bool full()   //判断队列是否为满&#123;    return (_rear + 1) % _size == _front;&#125;Queue(const Queue &amp;src) //拷贝构造函数&#123;    _size=src._size;    _pQue = new int[src._size];    for(int i=_front ;i!=rear;i=(i+1)%_size)    &#123;        _pQue[i]=src._pQue[i];    &#125;    _front=src._front;    _rear=src._rear;&#125;Queue &amp;operator=(const Queue &amp;src)   //赋值运算符重载函数&#123;    if(this==&amp;src) return *this;    delete[] _pQue;    _size=src._size;    _pQue = new int[src._size];    for(int i=_front ;i!=rear;i=(i+1)%_size)    &#123;        _pQue[i]=src._pQue[i];    &#125;    _front=src._front;    _rear=src._rear;    return *this;&#125;</code></pre><p>private:<br>    int <em>_pQue; //申请队列的数组空间，浅拷贝有问题，需要自己实现拷贝构造与赋值<br>    int _front;<br>    int _rear;<br>    int _size;<br>    void resize()   //扩容<br>    {<br>        int index = 0;<br>        int </em>pNew = new int[_size <em> 2];<br>        for(int i=_front;i!=_rear;i=(i+1)%_size)<br>        {<br>            pNew[index++] = _pQue[i];<br>        }<br>        delete[] _pQue;<br>        _pQue = pNew;<br>        _front = 0;<br>        _rear = index;<br>        _size </em>= 2;<br>    }</p><p>}</p>]]></content>
      
      
      <categories>
          
          <category> c++初级学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程虚拟地址空间划分</title>
      <link href="/2025/05/14/%E8%BF%9B%E7%A8%8B%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4%E5%88%92%E5%88%86/"/>
      <url>/2025/05/14/%E8%BF%9B%E7%A8%8B%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4%E5%88%92%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="进程虚拟地址空间划分"><a href="#进程虚拟地址空间划分" class="headerlink" title="进程虚拟地址空间划分"></a>进程虚拟地址空间划分</h1><p>*任何编程语言，产生：1. 指令；2. 数据</p><h2 id="进程的虚拟地址空间"><a href="#进程的虚拟地址空间" class="headerlink" title="进程的虚拟地址空间"></a>进程的虚拟地址空间</h2><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20250107132558424.png" alt="image-20250107132558424"></p><ol><li>上面×处，不可访问，        <img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20250107131215417.png" alt="image-20250107131215417"></li></ol><p>​                                     nullptr 空指针(0地址)不可访问</p><ol><li><p>.text    .rodata(read only)   指令放在这，叫代码段        </p><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20250107131606959.png" alt="image-20250107131606959"></p></li></ol><p>​            这是错误的，*p在代码段，read only不能修改</p><p>​            现在有的编译器已经不允许指针直接指向<strong>常量字符串</strong>了</p><ol><li>.data   存放初始化且初始化不为0 </li></ol><ol><li>.bss       0与未初始化</li></ol><ol><li>.heap   new，malloc在这分配内存  从上往下</li></ol><ol><li>加载共享库    *.dll(win)       .so(linux)</li></ol><ol><li>stack  从下往上</li></ol><ol><li>命令行参数和环境变量</li></ol><ol><li><p>ZONE_DMA </p><p>ZONE_NORMAL</p><p>ZONE_HIGHMEN</p></li></ol><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> gdata1 = <span class="number">10</span>;      <span class="comment">//.data</span></span><br><span class="line"><span class="type">int</span> gdata2 = <span class="number">0</span>;<span class="comment">//.bss</span></span><br><span class="line"><span class="type">int</span> gdata3;<span class="comment">//.bss</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> gdata4=<span class="number">11</span><span class="comment">//.data</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> gdata5=<span class="number">0</span><span class="comment">//.bss</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> gdata6<span class="comment">//.bss</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">12</span>;<span class="comment">//这里不是数据，而是指令</span></span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>;<span class="comment">//本质为MOV DWORD PTR[a],0CH，指令运行时，在stack上开辟4B存放12这个和数据</span></span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> e = <span class="number">13</span>;<span class="comment">//静态局部变量，放在数据段，但不初始化，知道程序第一次运行到他们才开始初始化，因此e在.data,fg在.bss</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> g;</span><br><span class="line">cout&lt;&lt;c&lt;&lt;g&lt;&lt;endl;<span class="comment">//c为无效值，g为0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="进程内核空间共享"><a href="#进程内核空间共享" class="headerlink" title="进程内核空间共享"></a>进程内核空间共享</h2><p>**每一个进程的用户空间是私有的，但内核空间是共享的</p><p><img src="C:\Users\yolo\AppData\Roaming\Typora\typora-user-images\image-20250107134011285.png" alt="image-20250107134011285"></p><p>因此，进程之间的通信：匿名管道通信</p>]]></content>
      
      
      <categories>
          
          <category> c++初级学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建博客二</title>
      <link href="/2025/05/14/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%BA%8C/"/>
      <url>/2025/05/14/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p>上瘾了继续搞</p><h2 id="本地搜索系统"><a href="#本地搜索系统" class="headerlink" title="本地搜索系统"></a>本地搜索系统</h2><ol><li>安装依赖：前往博客根目录，打开cmd命令窗口执行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><ol><li>注入配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol><li>主题yml中</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="bullet">-</span>  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">+</span>  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>重新编译运行即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo generate</span><br></pre></td></tr></table></figure></p><h2 id="GITHUB"><a href="#GITHUB" class="headerlink" title="GITHUB"></a>GITHUB</h2><ol><li><p>Githhub</p></li><li><p>setting</p></li><li><p>email,这个不要勾选</p></li></ol><h2 id="首页中tag，categories等问题"><a href="#首页中tag，categories等问题" class="headerlink" title="首页中tag，categories等问题"></a>首页中tag，categories等问题</h2><p>参考</p><blockquote><ol><li><a href="https://www.jianshu.com/p/e17711e44e00">Hexo使用攻略-添加分类及标签 - 简书</a></li><li><a href="https://www.cnblogs.com/an-shiguang/p/18269048#_label3_0_1_6">https://www.cnblogs.com/an-shiguang/p/18269048#_label3_0_1_6</a></li></ol></blockquote><p>1.打开命令行，进入博客所在文件夹。执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure></p><p>2.将index.md中添加<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type: &quot;tags&quot;        #注意是type，不是tag</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure><br>3.为博客文章添加tag、categories</p><h2 id="配置hexo-butterfly-categories-card"><a href="#配置hexo-butterfly-categories-card" class="headerlink" title="配置hexo-butterfly-categories-card"></a>配置hexo-butterfly-categories-card</h2><p>参考链接</p><blockquote><p><a href="https://akilar.top/posts/a9131002/">https://akilar.top/posts/a9131002/</a><br>代码应放在站点yml文件中</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 搭建个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录小米手机刷系统</title>
      <link href="/2025/05/14/%E8%AE%B0%E5%BD%95%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E5%88%B7%E7%B3%BB%E7%BB%9F/"/>
      <url>/2025/05/14/%E8%AE%B0%E5%BD%95%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E5%88%B7%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="记录小米手机刷系统"><a href="#记录小米手机刷系统" class="headerlink" title="记录小米手机刷系统"></a>记录小米手机刷系统</h1><p>手机型号： Redmi Note 11 5g（国外有叫NOTE 11 T）<br>目的：刷个支持google的系统<br>方案1：pixel experience （失败，似乎是因为卡刷包ab分区不成功）<br>方案2：直接刷miui印度版 （失败，卡谷歌验证进不去）<br>方案3：twrp+miui印度版 （成功）（成功原因不明，不确定是找的线刷包跳了谷歌验证，还是twrp在recovery模式跳过谷歌验证）</p><ol><li>解锁bl锁<br>用官方工具解bl,等7d</li><li><p>找个rec，找来找去还是twrp<br>注意：redmi是vab，正常刷rec刷不进去！ 我反正第一次刷错rec直接成砖了，fastboot都进不去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash boot &lt;recovery_filename&gt;.img</span><br></pre></td></tr></table></figure><p>临时把twrp刷进去，用twrp里的安装rec固化rec，以后打开rec都是自己安装的rec了</p></li><li><p>自己找对应机型的 miui global 线刷包</p></li><li>用小米刷机工具刷入线刷包</li><li>（或许？）rec模式下，搞机助手跳过谷歌验证<br><a href="https://imold.wang/technology/phone/364.html">https://imold.wang/technology/phone/364.html</a></li></ol><hr><p>救砖笔记：<br>参考视频： <a href="https://www.bilibili.com/video/BV18F411V7e9/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click">https://www.bilibili.com/video/BV18F411V7e9/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click</a><br>关键是让手机连到电脑<br><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250504145216.png" alt="20250504145216"> mtk那个软件简直神了，前提是驱动啥的搞好，这就玄学了</p><p>驱动问题：<br>redmi在设备管理器里识别成mtp啥的，更新有显示inf安装失败，去下个新的mtp，然后把老的inf删除掉（inf文件右键安装，位置在system32里）</p><p>若干工具：</p><ol><li>搞机助手(有点用，但不多。。。还会和安卓adb冲突，adb如果显示端口占用，记得把这个关了)</li><li>安卓adb</li><li>小米解锁工具</li><li>小米刷机工具 miflash pro</li><li>libusb</li><li>twrp，这个最难找</li></ol>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 玩机 </tag>
            
            <tag> 救砖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于include以及多个文件间声明与调用</title>
      <link href="/2025/05/14/%E5%85%B3%E4%BA%8Einclude%E4%B8%8E%E5%A4%9A%E4%B8%AA%E6%BA%90%E6%96%87%E4%BB%B6%E5%85%B3%E8%81%94/"/>
      <url>/2025/05/14/%E5%85%B3%E4%BA%8Einclude%E4%B8%8E%E5%A4%9A%E4%B8%AA%E6%BA%90%E6%96%87%E4%BB%B6%E5%85%B3%E8%81%94/</url>
      
        <content type="html"><![CDATA[<h1 id="关于include以及多个文件间声明与调用"><a href="#关于include以及多个文件间声明与调用" class="headerlink" title="关于include以及多个文件间声明与调用"></a>关于include以及多个文件间声明与调用</h1><p>C++中包含#include存在两种不同的形式，尖括号&lt;&gt;和双引号””</p><ol><li><p><strong>&lt;&gt;只可以访问 系统目录下的头文件(.h)</strong></p><p>比如在VS2013中，编译器会直接在<Visual studio 2013安装目录>\VC\include目录下查找到stdio.h这个文件，这就是编译器的类库目录；在Linux GCC编译环境下，一般为/user/include和/usr/local/include。 </p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20250107163045933.png" alt="image-20250107163045933"></p><ol><li><p>#include””：默认从<strong><em>\</em>项目当前目录**</strong>查找头文件，所谓项目当前目录，就是项目工程文件（*.vcxproj）所在的目录</p><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20250107163204273.png" alt="image-20250107163204273"></p><p>如果在项目当前目录下查找失败，再从<strong><em>\</em>项目配置的头文件引用目录**</strong>查找头文件，所谓项目配置的引用目录，就是我们在项目工程中设置的头文件引用目录，Windows VS编译环境如下图所示。在Linux GCC编译环境下，则一般通过在Makefile文件中使用-L参数指定引用目录。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20250107163218148.png" alt="image-20250107163218148"></p><hr><h1 id="如何将多个源文件关联起来"><a href="#如何将多个源文件关联起来" class="headerlink" title="如何将多个源文件关联起来"></a>如何将多个源文件关联起来</h1><ol><li>如图，文件目录：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20250107163513401.png" alt="image-20250107163513401"></p><ol><li>pch.cpp中定义了sum</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20250107163552618.png" alt="image-20250107163552618"></p><ol><li>test.c中想要调用，需要先<u>声明</u></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20250107163656789.png" alt="image-20250107163656789"></p><p>在此例中，编译器在编译test.c时，会生成符号，但是无法执行。在链接器与pch.cpp链接后，才能找到相关的定义，才能执行。</p>]]></content>
      
      
      <categories>
          
          <category> c++初级学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于博客图片上传问题</title>
      <link href="/2025/05/14/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E9%97%AE%E9%A2%98/"/>
      <url>/2025/05/14/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="关于hexo-typora博客图片上传问题"><a href="#关于hexo-typora博客图片上传问题" class="headerlink" title="关于hexo+typora博客图片上传问题"></a>关于hexo+typora博客图片上传问题</h1><p>使用图床</p><ol><li>下载picgo<blockquote><p><a href="https://molunerfinn.com/PicGo/">https://molunerfinn.com/PicGo/</a></p></blockquote></li><li><ol><li><p>这里我选择SM.MS，听说体验更好<br> 注册登录后，找到API TOKEN,生成后放到app里</p><p> (在图床设置里，小框的右上角点开)</p></li></ol><p>*注意：发现这里由于 sm.ms 图床的域名国内无法访问，sm.ms 官网已经给出解决文案，针对国内    用户添加了备用域名：smms.app</p><ol><li>我顺便把github的图床也搞了看看，感觉这种东西都迟早会遇到问题</li></ol><p>重新建立一个仓库，生成TOKEN</p></li></ol><ol><li><p>在typora里，</p><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20241230101741589.png" alt="image-20241230101741589" style="zoom:50%;" /></p></li><li><p>typora里有图片后，右键就可以上传了</p></li><li><p>我发现github仓库里图片没有目录，继续摸索</p><p><a href="https://blog.csdn.net/scdnplayer/article/details/116380432">typora picgo gitee 按年月日分类上传图片_picgo文件分类上传-CSDN博客</a></p><p>额，能改，但没必要，上传图片已经重命名了，决不是我懒</p></li><li><p>typora已在网盘里</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 搭建个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建博客踩坑合集</title>
      <link href="/2025/05/14/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E5%90%88%E9%9B%86/"/>
      <url>/2025/05/14/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h1><ol><li><blockquote><p>访问 <a href="http://localhost:4000/">http://localhost:4000/</a> ，页面显示<code>extends includes/layout.pug block content include ./includes/mixins/indexPostUI.pug +indexPostUI</code> 。<br>需要安装运行`</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></blockquote></li><li><p>butterfly官方文档</p><blockquote><p><a href="https://butterfly.js.org/posts/dc584b87/">Butterfly 文檔(二) 主題頁面 | Butterfly</a></p></blockquote></li><li><p>关于hexo-d时spawn-failed<br>参考链接</p><blockquote><p><a href="https://blog.csdn.net/2303_79611263/article/details/140346864">[最全]解决将Hexo部署到GitHub时报错：Error: Spawn failed_hexo无法部署到github-CSDN博客</a></p></blockquote><p><em>但是，个人觉得==网络问题==，最好的办法5min再来吧</em></p></li><li><p>hexo g 以及hexo 是卡住</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">taskkill /F /IM node.exe</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>如何解决ssh: connect to host github.com port 22: Connection refused</p><p>.ssh下config文件将github的修改如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure></li><li><p>vscode同步博客<br>从github上clone hexo分支后，vscode能够自动识别git仓库<br>接下来可以用vscode的插件进行同步，无需再手动操作，同时vscode的markdown更直观</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 搭建个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造函数的初始化列表</title>
      <link href="/2025/05/14/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8/"/>
      <url>/2025/05/14/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="构造函数的初始化列表"><a href="#构造函数的初始化列表" class="headerlink" title="构造函数的初始化列表"></a>构造函数的初始化列表</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加日期,CDate类是CGoods商品信息的一部分</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CDate</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CDate</span>(<span class="type">int</span> y,<span class="type">int</span> m,<span class="type">int</span> d):   <span class="comment">//没有默认构造函数了</span></span><br><span class="line">    &#123;</span><br><span class="line">        _year=y;</span><br><span class="line">        _month=m;</span><br><span class="line">        _day=d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;_year&lt;&lt;<span class="string">&quot;/&quot;</span>&lt;&lt;month&lt;&lt;<span class="string">&quot;/&quot;</span>&lt;&lt;_day&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _year,_month,_day;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CDate没有合适的默认构造函数可用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CGoods</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CGoods</span>(<span class="type">const</span> <span class="type">char</span> *n,<span class="type">int</span> a,<span class="type">double</span> p，<span class="type">int</span> y,<span class="type">int</span> m,<span class="type">int</span> d)</span><br><span class="line">    :_date(y,m,d)   <span class="comment">//CDate _date(y,m,d)</span></span><br><span class="line">    ,_price(p)       <span class="comment">//构造函数的初始化列表，对成员变量进行初始化</span></span><br><span class="line">    <span class="comment">//int _price=p;    </span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">strcpy</span>(_name,n);    <span class="comment">//strcpy的两个参数为指针char*</span></span><br><span class="line">        _amount=a;  <span class="comment">//int _amount=a; amount=a;</span></span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;_name:&quot;</span>&lt;&lt;_name&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;amount:&quot;</span>&lt;&lt;_amount&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;price:&quot;</span>&lt;&lt;_price&lt;&lt;endl;</span><br><span class="line">        _date.<span class="built_in">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span> _name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> _amount;</span><br><span class="line">    <span class="type">double</span> _price;</span><br><span class="line">    CDate _date;    <span class="comment">//用户自定义的成员对象，是会被初始化的： 1.分配内存 2.调用构造函数</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">CGoods <span class="title">g</span><span class="params">(<span class="string">&quot;apple&quot;</span>,<span class="number">10</span>,<span class="number">5.5</span>,<span class="number">2025</span>,<span class="number">3</span>,<span class="number">5</span>)</span></span>;</span><br><span class="line">    good.<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    public:</span><br><span class="line">    Test(int date=10)</span><br><span class="line">    :mb(date)</span><br><span class="line">    ,ma(ma)&#123;&#125;</span><br><span class="line">    void show()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;ma:&quot;&lt;&lt;ma&lt;&lt;&quot;mb:&quot;&lt;&lt;mb&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    private:</span><br><span class="line">    int ma;</span><br><span class="line">    int mb;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Test t;</span><br><span class="line">    //这里初始化t，按照private中的顺序初始化成员变量，先初始化ma，再初始化mb，ma按照初始化列表中ma=mb，此时mb无值，因此无效</span><br><span class="line">    t.show();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">//这里结果为ma无效，mb为10</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++初级学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 构造函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/2025/05/14/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2025/05/14/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="二分查找-leetcode-704"><a href="#二分查找-leetcode-704" class="headerlink" title="二分查找 leetcode 704"></a>二分查找 leetcode 704</h1><ol><li>vector</li></ol><p>需要头文件</p><h1 id="include"><a href="#include" class="headerlink" title="include "></a>include <vector></h1><p>vector<int>&amp; nums     nums 是 vector<int> 类型对象的引用<br>知道数组长度           nums.size()</p><ol><li>题目<br>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</li></ol><p>示例 1:</p><p>输入: nums = [-1,0,3,5,9,12], target = 9<br>输出: 4<br>解释: 9 出现在 nums 中并且下标为 4<br>示例 2:</p><p>输入: nums = [-1,0,3,5,9,12], target = 2<br>输出: -1<br>解释: 2 不存在 nums 中因此返回 -1<br>提示：</p><p>你可以假设 nums 中的所有元素是不重复的。<br>n 将在 [1, 10000]之间。<br>nums 的每个元素都将在 [-9999, 9999]之间。</p><ol><li>解法<br>暴力解<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=nums.<span class="built_in">size</span>()<span class="number">-1</span>;i++)</span><br><span class="line">       &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]==target)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><hr><p>二分查找<br><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250306201251.png" alt="20250306201251"></p><p>前提数组递增有序且无重复<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(left&lt;=right)</span><br><span class="line">&#123;</span><br><span class="line">    mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(nums[mid]==target)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(nums[mid]&gt;target)</span><br><span class="line">    &#123;</span><br><span class="line">        right=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(nums[mid]&lt;target)</span><br><span class="line">    &#123;</span><br><span class="line">        left=mid<span class="number">+1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象的浅拷贝和深拷贝</title>
      <link href="/2025/05/14/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
      <url>/2025/05/14/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="对象的浅拷贝和深拷贝"><a href="#对象的浅拷贝和深拷贝" class="headerlink" title="对象的浅拷贝和深拷贝"></a>对象的浅拷贝和深拷贝</h1><p>一个类有多个对象，共享一套成员方法<br>成员方法如何知道操作哪个对象？<br>成员方法一经编译，方法参数前面添加一个this指针</p><p>堆stack 栈heap？</p><ol><li>局部变量放栈上 </li><li>new delete等动态分配在堆上，堆就是一个动态分配的内存区域</li><li>全局变量 放数据段，生命周期为整个程序的开始到结束</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    SeqStack s;         //无参数，默认构造默认析构</span><br><span class="line">    SeqStack s1(10);</span><br><span class="line">    SeqStack s2=s1;     //拷贝构造，内存拷贝，</span><br><span class="line">    //浅拷贝</span><br><span class="line">    //s1析构出错</span><br><span class="line">    //等同SeqStack s3(s1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250302162332.png" alt="20250302162332"><br>s2析构先将地址释放，s1析构失败</p><p>对象默认的拷贝构造，（浅拷贝）是内存的数据拷贝<br>关键是对象若占用外部资源（指针指向外部内存），那么浅拷贝出现问题<br>因此，应该做深拷贝，为新对象也分配内存，再把内存数据拷贝过去，不能用默认的拷贝构造函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//需要自定义拷贝构造函数,深拷贝</span><br><span class="line">SeqStack(const SeqStack&amp; src)   </span><br><span class="line">&#123;</span><br><span class="line">    _pstack= new int[src._size];</span><br><span class="line">    for (int i = 0; i &lt; _size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        _pstack[i]=src._pstack[i];</span><br><span class="line">    &#125;</span><br><span class="line">    _top=src._top;</span><br><span class="line">    _size=src._size;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250302162927.png" alt="20250302162927"></p><p>memcpy(),realloc() 都是浅拷贝，拷贝后指针指向的内存地址都一样</p><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s2=s1;  //默认的赋值操作，</span><br><span class="line">//做的是内存拷贝，s2指向s1</span><br><span class="line">//s2。operator=(s1)</span><br><span class="line">//void operator=(const SeqStack&amp; src)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因此还要自定义赋值函数<br>```<br>//赋值重载函数，复制意味着已经有了定义对象<br>void operator=(const SeqStack&amp; src) //这里参数为常引用，可以避免不必要的对象拷贝<br>//void operator=(SeqStack src);<br>// 按值传递，会触发拷贝构造函数<br>{<br>    delete[] _pstack;   //先释放当前对象占用的外部资源<br>    if (this==&amp;src)<br>    return; //防止自己给自己赋值<br>    _pstack= new int[src._size];<br>    for (int i = 0; i &lt; _size; i++)<br>    {<br>        _pstack[i]=src._pstack[i];<br>    }<br>    _top=src._top;<br>    _size=src._size;<br>}</p>]]></content>
      
      
      <categories>
          
          <category> c++初级学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 浅拷贝深拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建服务器博客</title>
      <link href="/2025/05/14/%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/05/14/%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="把自己的博客部署在服务器上"><a href="#把自己的博客部署在服务器上" class="headerlink" title="把自己的博客部署在服务器上"></a>把自己的博客部署在服务器上</h1><ol><li>画69买了一年，第一次买服务器。。。应该不会踩坑吧，但愿！</li><li>傻逼服务器，我感觉是腾讯云装的Ubuntu有问题，yum命令死活用不了，换成centos就好了。。。（25年2/16补充，yum是centos的，ubuntu是sudo apt install那一套）</li><li>参考<a href="https://lneverl.github.io/posts/2092ec56.html">https://lneverl.github.io/posts/2092ec56.html</a><br>b站也有视频讲解很赞</li></ol><hr><h1 id="预备软件：1-Xshell（这个无所谓，在命令行隶属都行）"><a href="#预备软件：1-Xshell（这个无所谓，在命令行隶属都行）" class="headerlink" title="预备软件：1. Xshell（这个无所谓，在命令行隶属都行）"></a>预备软件：1. Xshell（这个无所谓，在命令行隶属都行）</h1><p>​                      2. WinSCP（这个最好下一下，可视化linux文件目录，也可以直接修改里面的文件，不用vim）</p><hr><h1 id="1-开始安装nginx"><a href="#1-开始安装nginx" class="headerlink" title="1. 开始安装nginx"></a>1. 开始安装nginx</h1><p>   安装ngin需要相关的依赖库，我们先进行库的安装。</p><h2 id="1-1-安装gcc-gcc-c"><a href="#1-1-安装gcc-gcc-c" class="headerlink" title="1.1  安装gcc gcc-c++"></a>1.1  安装gcc gcc-c++</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc gcc-c++</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-2-安装PCRE库"><a href="#1-2-安装PCRE库" class="headerlink" title="1.2 安装PCRE库"></a>1.2 安装PCRE库</h3>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cd /usr/local/</span><br><span class="line">    </span><br><span class="line">wget http://downloads.sourceforge.net/project/pcre/pcre/8.45/pcre-8.45.tar.gz</span><br><span class="line"></span><br><span class="line">tar -xvf pcre-8.45.tar.gz</span><br><span class="line"></span><br><span class="line">cd pcre-8.45</span><br><span class="line"></span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">pcre-config --version</span><br></pre></td></tr></table></figure><p>​        </p><h3 id="1-3-安装nginx"><a href="#1-3-安装nginx" class="headerlink" title="1.3  安装nginx"></a>1.3  安装nginx</h3> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">cd /usr/local/</span><br><span class="line">    </span><br><span class="line">wget http://nginx.org/download/nginx-1.17.9.tar.gz</span><br><span class="line">    </span><br><span class="line">tar -xvf nginx-1.17.9.tar.gz</span><br><span class="line">    </span><br><span class="line">cd nginx-1.17.9</span><br><span class="line">    </span><br><span class="line">./configure</span><br><span class="line">    </span><br><span class="line">make &amp;&amp; make install </span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx   //启动ngnix</span><br></pre></td></tr></table></figure><p>​<br>​        <strong>这步完成就可以用公网ip访问了</strong><br>​        </p><h3 id="1-4-保障80端口开放"><a href="#1-4-保障80端口开放" class="headerlink" title="1.4 保障80端口开放"></a>1.4 保障80端口开放</h3><hr><h2 id="2-安装Git以及Node-js"><a href="#2-安装Git以及Node-js" class="headerlink" title="2. 安装Git以及Node.js"></a>2. 安装Git以及Node.js</h2><h3 id="2-1-安装Node-js"><a href="#2-1-安装Node-js" class="headerlink" title="2.1 安装Node.js"></a>2.1 安装Node.js</h3><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nodejs</span><br><span class="line">yum install npm</span><br><span class="line"></span><br></pre></td></tr></table></figure></h2><h3 id="2-2-安装git及新建git用户"><a href="#2-2-安装git及新建git用户" class="headerlink" title="2.2  安装git及新建git用户"></a>2.2  安装git及新建git用户</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">yum install git</span><br><span class="line"></span><br><span class="line">adduser git</span><br><span class="line"></span><br><span class="line">chmod 740 /etc/sudoers</span><br><span class="line"></span><br><span class="line">vi /etc/sudoers  //vim 里面添加git ALL=(ALL) ALL，i插入，esc退出插入，：wq保存//退出，也可以用winscp直接可视化操作</span><br></pre></td></tr></table></figure><p>编辑完,更改文件权限</p><p>‘’’ </p><p>chmod 400 /etc/sudoers</p><p>sudo passwd git</p><p>‘’’</p><h3 id="2-3-切换git用户并且建立密钥"><a href="#2-3-切换git用户并且建立密钥" class="headerlink" title="2.3   切换git用户并且建立密钥"></a>2.3   切换git用户并且建立密钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br><span class="line"> </span><br><span class="line"> cd ~</span><br><span class="line"> </span><br><span class="line"> mkdir .ssh</span><br><span class="line"> </span><br><span class="line"> cd .ssh</span><br><span class="line"> </span><br><span class="line"> vi authorized_keys   //此处将ssh  pub公钥粘贴进这个文本</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx   //启动ngnix</span><br></pre></td></tr></table></figure><p><del>我nm，为什么这里是usr，网上那么多是user，查了我半天。。。还有nginx按别按错目录了，我现在里面有两个nginx，根本不敢删hh</del></p><h3 id="2-4-创建git仓库"><a href="#2-4-创建git仓库" class="headerlink" title="2.4 创建git仓库"></a>2.4 创建git仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line"></span><br><span class="line">git init --bare blog.git</span><br><span class="line"></span><br><span class="line">vi ~/blog.git/hooks/post-receive  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入的是<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --work-tree=/home/www/website --git-dir=/home/git/blog.git checkout -f</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ~/blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><h3 id="2-5-新建-home-www-website"><a href="#2-5-新建-home-www-website" class="headerlink" title="2.5 新建/home/www/website"></a>2.5 新建/home/www/website</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">su root</span><br><span class="line"></span><br><span class="line">输入密码</span><br><span class="line"></span><br><span class="line">cd /home</span><br><span class="line"></span><br><span class="line">mkdir www</span><br><span class="line"></span><br><span class="line">cd www</span><br><span class="line"></span><br><span class="line">mkdir website</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chmod 777 /home/www/website</span><br><span class="line"></span><br><span class="line">chmod 777 /home/www</span><br></pre></td></tr></table></figure><h3 id="2-6-cmd中输入"><a href="#2-6-cmd中输入" class="headerlink" title="2.6 cmd中输入"></a>2.6 cmd中输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ssh -v git@服务器的公网ip</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本地博客config.yml<br>修改 repo: git@这里改为服务器公网IP:/home/git/blog.git</p><hr><h3 id="2-7-修改服务器上"><a href="#2-7-修改服务器上" class="headerlink" title="2.7 修改服务器上"></a>2.7 修改服务器上</h3><p>把/usr/local/nginx/conf/中nginx.conf中的root改为，共两个</p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/www/website</span><br></pre></td></tr></table></figure></h2><h3 id="3-此时已经基本完成了，但还要重启niginx"><a href="#3-此时已经基本完成了，但还要重启niginx" class="headerlink" title="3. 此时已经基本完成了，但还要重启niginx"></a>3. 此时已经基本完成了，但还要重启niginx</h3><hr><h1 id="2-写入重启脚本"><a href="#2-写入重启脚本" class="headerlink" title="2. 写入重启脚本"></a>2. 写入重启脚本</h1><p>用脚本方便些？<br>在/etc/init.d/(<strong>注意</strong>此处init.d是个文件夹)路径下添加脚本文件，名称为nginx，内容如下（不会命令行可以在直接用winscp操作）<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line">#Startup script for the nginx Web Server</span><br><span class="line">#chkconfig: 2345 85 15</span><br><span class="line">nginx=/usr/local/nginx/sbin/nginx</span><br><span class="line">conf=/usr/local/nginx/conf/nginx.conf</span><br><span class="line">case $1 in </span><br><span class="line">start)</span><br><span class="line">echo -n &quot;Starting Nginx&quot;</span><br><span class="line">$nginx -c $conf</span><br><span class="line">echo &quot; done.&quot;</span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">echo -n &quot;Stopping Nginx&quot;</span><br><span class="line">killall -9 nginx</span><br><span class="line">echo &quot; done.&quot;</span><br><span class="line">;;</span><br><span class="line">test)</span><br><span class="line">$nginx -t -c $conf</span><br><span class="line">echo &quot;Success.&quot;</span><br><span class="line">;;</span><br><span class="line">reload)</span><br><span class="line">echo -n &quot;Reloading Nginx&quot;</span><br><span class="line">ps auxww | grep nginx | grep master | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill -HUP</span><br><span class="line">echo &quot; done.&quot;</span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line">$nginx -s reload</span><br><span class="line">echo &quot;reload done.&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;Usage: $0 &#123;start|restart|reload|stop|test|show&#125;&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><br>然后<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x nginx</span><br></pre></td></tr></table></figure></p><hr><p>最后记一下3条指令来控制服务器<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">启动service nginx start</span><br><span class="line">停止service nginx stop</span><br><span class="line">重启service nginx reload</span><br></pre></td></tr></table></figure><br>如果以前部署在别的服务器上，记得部署的时候把本地blog文件夹里的部署文件删了.deploy那个文件夹</p>]]></content>
      
      
      <categories>
          
          <category> 搭建个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装SDN网络数据中心环境</title>
      <link href="/2025/05/14/%E5%AE%89%E8%A3%85SDN%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83%E7%8E%AF%E5%A2%83/"/>
      <url>/2025/05/14/%E5%AE%89%E8%A3%85SDN%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="失败安装"><a href="#失败安装" class="headerlink" title="失败安装"></a>失败安装</h1><h2 id="1-虚拟机ubuntu16-04"><a href="#1-虚拟机ubuntu16-04" class="headerlink" title="1. 虚拟机ubuntu16.04"></a>1. 虚拟机ubuntu16.04</h2><p><a href="https://blog.csdn.net/trackxiaoxin321/article/details/115591796">https://blog.csdn.net/trackxiaoxin321/article/details/115591796</a></p><ol><li><a href="http://mirrors.ustc.edu.cn/ubuntu-releases/16.04/">http://mirrors.ustc.edu.cn/ubuntu-releases/16.04/</a>         desktop</li><li>分配cpu一般为本机一半</li><li>主机与ubuntu之间复制粘贴<br>sudo apt-get install open-vm-tools-desktop -y<br>重启<h2 id="2-配置mininet"><a href="#2-配置mininet" class="headerlink" title="2. 配置mininet"></a>2. 配置mininet</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br><span class="line">su root</span><br><span class="line">apt-get install git</span><br><span class="line">git clone https://github.com/mininet/mininet.git</span><br><span class="line">cd mininet</span><br><span class="line">cd util</span><br><span class="line">./install.sh -n3v</span><br><span class="line">mn                          // 测试</span><br><span class="line">pingall</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h2 id="3-RYU安装"><a href="#3-RYU安装" class="headerlink" title="3. RYU安装"></a>3. RYU安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py       //https://blog.csdn.net/m0_46176760/article/details/118717366?utm_source=app&amp;app_version=4.11.0</span><br><span class="line"></span><br><span class="line">python3 get-pip.py.2</span><br><span class="line"></span><br><span class="line">cd /home/zzy</span><br><span class="line"></span><br><span class="line">git clone https://github.com/osrg/ryu.git</span><br><span class="line"></span><br><span class="line">cd ryu</span><br><span class="line"></span><br><span class="line">pip install -r tools/pip-requires</span><br><span class="line"></span><br><span class="line">python3 setup.py install</span><br><span class="line"></span><br><span class="line">cd ryu/app</span><br><span class="line"></span><br><span class="line">ryu-manager example_switch_13.py                 //测试</span><br><span class="line"></span><br><span class="line">mn  --controller=remote                         //另一个终端里，控制器</span><br><span class="line">pingall</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h1 id="20-04"><a href="#20-04" class="headerlink" title="20.04"></a>20.04</h1><h2 id="1-vmware-workstation安装ubuntu无法显示继续、下一步按钮"><a href="#1-vmware-workstation安装ubuntu无法显示继续、下一步按钮" class="headerlink" title="1.vmware workstation安装ubuntu无法显示继续、下一步按钮"></a>1.vmware workstation安装ubuntu无法显示继续、下一步按钮</h2><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250401160737.png" alt="20250401160737"><br>增加github域名<br>/etc/hosts</p><h2 id="2-配置mininet-1"><a href="#2-配置mininet-1" class="headerlink" title="2. 配置mininet"></a>2. 配置mininet</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br><span class="line">su root</span><br><span class="line">apt-get install git</span><br><span class="line">git clone https://github.com/mininet/mininet.git</span><br><span class="line">cd mininet</span><br><span class="line">cd util</span><br><span class="line">./install.sh -n3v</span><br><span class="line">mn                          // 测试</span><br><span class="line">pingall</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h2 id="3-RYU安装-1"><a href="#3-RYU安装-1" class="headerlink" title="3. RYU安装"></a>3. RYU安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py       //https://blog.csdn.net/m0_46176760/article/details/118717366?utm_source=app&amp;app_version=4.11.0</span><br><span class="line"></span><br><span class="line">python3 get-pip.py.2</span><br><span class="line"></span><br><span class="line">cd /home/zzy</span><br><span class="line"></span><br><span class="line">git clone https://github.com/osrg/ryu.git</span><br><span class="line"></span><br><span class="line">cd ryu</span><br><span class="line"></span><br><span class="line">pip install -r tools/pip-requires</span><br><span class="line"></span><br><span class="line">python3 setup.py install</span><br><span class="line"></span><br><span class="line">cd ryu/app</span><br><span class="line"></span><br><span class="line">ryu-manager example_switch_13.py                 //测试</span><br><span class="line"></span><br><span class="line">mn  --controller=remote                         //另一个终端里，控制器</span><br><span class="line">pingall</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd /home/zzy/mininet/examples</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line">python3 ./miniedit.py</span><br><span class="line"></span><br><span class="line">python3 miniedit.py</span><br></pre></td></tr></table></figure><h2 id="建拓扑"><a href="#建拓扑" class="headerlink" title="建拓扑"></a>建拓扑</h2><p><a href="https://blog.csdn.net/qq_59718828/article/details/127404912#:~:text=%E6%9C%AC%E6%96%87%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E4%BA%86%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E3%80%81%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E5%92%8CPython%E8%84%9A%E6%9C%AC%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%88%A9%E7%94%A8Mininet%E5%88%9B%E5%BB%BA%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91%EF%BC%8C%E5%B9%B6%E7%BB%93%E5%90%88Ryu%E6%8E%A7%E5%88%B6%E5%99%A8%E8%BF%9B%E8%A1%8C%E7%BB%88%E7%AB%AF%E9%80%9A%E4%BF%A1%E7%9A%84%E6%AD%A5%E9%AA%A4%E3%80%82%20%E6%AF%8F%E7%A7%8D%E6%96%B9%E6%B3%95%E9%83%BD%E5%8C%85%E6%8B%AC%E5%85%B7%E4%BD%93%E7%9A%84%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%8C%E7%89%B9%E5%88%AB%E5%BC%BA%E8%B0%83%E4%BA%86%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E5%BC%80%E5%90%AF%E9%A1%BA%E5%BA%8F%E5%92%8C%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95%E3%80%82%20%E6%9C%80%E5%90%8E%EF%BC%8C%E8%BF%98%E6%8F%90%E4%BE%9B%E4%BA%86%E9%80%9A%E8%BF%87%E4%BF%AE%E6%94%B9%E4%BF%9D%E5%AD%98%E7%9A%84Python%E8%84%9A%E6%9C%AC%E6%9D%A5%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E6%8B%93%E6%89%91%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%82%20%E6%91%98%E8%A6%81%E7%94%9F%E6%88%90%E4%BA%8E%20C%E7%9F%A5%E9%81%93,%EF%BC%8C%E7%94%B1%20DeepSeek-R1%20%E6%BB%A1%E8%A1%80%E7%89%88%E6%94%AF%E6%8C%81%EF%BC%8C%20%E5%89%8D%E5%BE%80%E4%BD%93%E9%AA%8C%20%3E">https://blog.csdn.net/qq_59718828/article/details/127404912#:~:text=%E6%9C%AC%E6%96%87%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E4%BA%86%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E3%80%81%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E5%92%8CPython%E8%84%9A%E6%9C%AC%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%88%A9%E7%94%A8Mininet%E5%88%9B%E5%BB%BA%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91%EF%BC%8C%E5%B9%B6%E7%BB%93%E5%90%88Ryu%E6%8E%A7%E5%88%B6%E5%99%A8%E8%BF%9B%E8%A1%8C%E7%BB%88%E7%AB%AF%E9%80%9A%E4%BF%A1%E7%9A%84%E6%AD%A5%E9%AA%A4%E3%80%82%20%E6%AF%8F%E7%A7%8D%E6%96%B9%E6%B3%95%E9%83%BD%E5%8C%85%E6%8B%AC%E5%85%B7%E4%BD%93%E7%9A%84%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%8C%E7%89%B9%E5%88%AB%E5%BC%BA%E8%B0%83%E4%BA%86%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E5%BC%80%E5%90%AF%E9%A1%BA%E5%BA%8F%E5%92%8C%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95%E3%80%82%20%E6%9C%80%E5%90%8E%EF%BC%8C%E8%BF%98%E6%8F%90%E4%BE%9B%E4%BA%86%E9%80%9A%E8%BF%87%E4%BF%AE%E6%94%B9%E4%BF%9D%E5%AD%98%E7%9A%84Python%E8%84%9A%E6%9C%AC%E6%9D%A5%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E6%8B%93%E6%89%91%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%82%20%E6%91%98%E8%A6%81%E7%94%9F%E6%88%90%E4%BA%8E%20C%E7%9F%A5%E9%81%93,%EF%BC%8C%E7%94%B1%20DeepSeek-R1%20%E6%BB%A1%E8%A1%80%E7%89%88%E6%94%AF%E6%8C%81%EF%BC%8C%20%E5%89%8D%E5%BE%80%E4%BD%93%E9%AA%8C%20%3E</a></p><p><a href="https://blog.csdn.net/2401_83340955/article/details/143267522">https://blog.csdn.net/2401_83340955/article/details/143267522</a></p><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250410152529.png" alt="20250410152529"></p><p>将miniedit.py文件的1444行的loadedTopology = self.convertJsonUnicode(json.load(f))</p><p>改成<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loadedTopology = json.load(f)</span><br></pre></td></tr></table></figure></p><p>.mn文件中把startcli 改为1</p>]]></content>
      
      
      <categories>
          
          <category> 毕业设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDN </tag>
            
            <tag> 数据中心 </tag>
            
            <tag> 网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 毕设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redraft相关</title>
      <link href="/2025/05/14/rlcraft%E9%99%84%E9%AD%94/"/>
      <url>/2025/05/14/rlcraft%E9%99%84%E9%AD%94/</url>
      
        <content type="html"><![CDATA[<h1 id="rlcraft附魔"><a href="#rlcraft附魔" class="headerlink" title="rlcraft附魔"></a>rlcraft附魔</h1><h2 id="毒火"><a href="#毒火" class="headerlink" title="毒火"></a>毒火</h2><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20250112104216563.png" alt="image-20250112104216563"></p><h2 id="法爆"><a href="#法爆" class="headerlink" title="法爆"></a>法爆</h2><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20250112104302950.png" alt="image-20250112104302950"></p><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20250112104418234.png" alt="image-20250112104418234"></p><h2 id="弓"><a href="#弓" class="headerlink" title="弓"></a>弓</h2><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20250112104858512.png" alt="image-20250112104858512"></p><h1 id="mc调gamma值"><a href="#mc调gamma值" class="headerlink" title="mc调gamma值"></a>mc调gamma值</h1><p>版本文件夹下option.txt</p>]]></content>
      
      
      <categories>
          
          <category> 我的世界 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rlcraft </tag>
            
            <tag> mc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>new,malloc,free,delete</title>
      <link href="/2025/05/14/new,malloc,free,delete/"/>
      <url>/2025/05/14/new,malloc,free,delete/</url>
      
        <content type="html"><![CDATA[<h1 id="malloc-free-new-delete"><a href="#malloc-free-new-delete" class="headerlink" title="malloc,free;new,delete"></a>malloc,free;new,delete</h1><p>**malloc和free是c的库函数<br>new和delete是运算符<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> *p=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>));<span class="comment">//开辟一个整型大小的内存</span></span><br><span class="line"><span class="comment">//malloc的返回值为void*，（int*）为强制转换,按字节开辟</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">nullptr</span>)<span class="comment">//内存开辟失败，p为空指针</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//malloc只管开辟，还需要初始化</span></span><br><span class="line">*p=<span class="number">20</span>;</span><br><span class="line"><span class="built_in">free</span>(p);<span class="comment">//malloc和free是c的库函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *pl=<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">catch</span>(<span class="type">const</span> bad_alloc &amp;e)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p1;</span><br><span class="line"><span class="comment">// new=malloc内存开辟+内存初始化</span></span><br><span class="line"><span class="comment">//malloc开辟失败，是通过返回值与nullptr比较</span></span><br><span class="line"><span class="comment">//new开辟失败，通过抛出bad_alloc类型的异常来判断</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *q=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>)*<span class="number">20</span>);<span class="comment">//无初始化</span></span><br><span class="line"><span class="type">int</span> *ql=<span class="keyword">new</span> <span class="type">int</span>[<span class="number">20</span>](<span class="number">30</span>);<span class="comment">//有初始化</span></span><br><span class="line"><span class="keyword">delete</span> []ql;<span class="comment">//删除数组内存，ql前面要[]</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>总结：</p><ol><li>malloc 按字节开辟内存，返回void*,需要强制类型转换，而new指定类型转换，返回异常</li><li>free只需传入内存起始位置，delete释放数组时+[]</li><li>c++时尽量用new delete</li></ol><p>**new有多少种？<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> *p1=<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">20</span>)</span><br><span class="line"><span class="type">int</span> *p2=<span class="built_in">new</span>(nothrow)<span class="type">int</span>;<span class="comment">//这种不抛出异常，也是和nullptr比较</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p3=<span class="keyword">new</span> <span class="type">const</span> <span class="built_in">int</span>(<span class="number">40</span>);</span><br><span class="line"><span class="comment">//定位new</span></span><br><span class="line"><span class="type">int</span> data=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *p4=<span class="built_in">new</span> (%data) <span class="built_in">int</span>(<span class="number">50</span>);<span class="comment">//在指定地址上，开辟1B,赋值为50</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="C-的引用"><a href="#C-的引用" class="headerlink" title="C++的引用"></a>C++的引用</h1><h2 id="引用和指针的区别？"><a href="#引用和指针的区别？" class="headerlink" title="引用和指针的区别？"></a>引用和指针的区别？</h2><ol><li>左值引用和右值引用</li><li>引用实例<blockquote><p>**引用时一种更安全的指针<br>1, 引用必须初始化，指针可以不初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> *p=&amp;a;</span><br><span class="line"><span class="type">int</span> &amp;b=a;<span class="comment">//引用一定要初始化，a一定要可以取地址，引用是先对右边取地址</span></span><br><span class="line"><span class="comment">//即int &amp;b=20 ;错误  20 不可以取地址</span></span><br><span class="line"><span class="comment">//引用只有一级引用，指针可以多级引用</span></span><br><span class="line"></span><br><span class="line">*p=<span class="number">20</span>;</span><br><span class="line">cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;*p&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line"><span class="comment">//   20      20       20 ;*p  b是同一个地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="引用的意义"><a href="#引用的意义" class="headerlink" title="引用的意义"></a>引用的意义</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void swap(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">int temp=a;</span><br><span class="line">a=b;</span><br><span class="line">b=temp;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a =10;</span><br><span class="line">int b=20 ;</span><br><span class="line">swap(a,b);//无法交换实参的值</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">void swap(int* a,int* b)//参数为指针</span><br><span class="line">&#123;</span><br><span class="line">int temp=*a;</span><br><span class="line">*a=*b;</span><br><span class="line">*b=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void swap(int &amp;a,int &amp;b)//参数为引用</span><br><span class="line">&#123;</span><br><span class="line">int temp=a;</span><br><span class="line">a=b;</span><br><span class="line">b=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a =10;</span><br><span class="line">int b=20 ;</span><br><span class="line">swap(&amp;a,&amp;b);//参数为指针</span><br><span class="line">swap(a,b);//参数为引用，不用我们自己取地址</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定义一个引用和一个指针，两者汇编指令一样；<br>通过引用修改值与通过指针修改，汇编也一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int array[5]=&#123;&#125;;</span><br><span class="line">int *p=array;</span><br><span class="line">//定义一个引用变量的方法，引用array数组，先写指针，再用右边&amp;把*覆盖</span><br><span class="line">//int *q=&amp;array  这是错误的，需要用数组指针</span><br><span class="line">//int (*q)[5]=&amp;array;</span><br><span class="line"></span><br><span class="line">int (&amp;q)[5]=array;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;sizeof(array)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;sizeof(p)&lt;&lt;endl;//注：这里指针大小与自己os位数有关</span><br><span class="line">cout&lt;&lt;sizeof(q)&lt;&lt;endl;//20，访问q就是在访问array，因此返回的是数组大小</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="左值引用与右值引用"><a href="#左值引用与右值引用" class="headerlink" title="左值引用与右值引用"></a>左值引用与右值引用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a=10;//左值，它有内存，有名字，值可以修改</span><br><span class="line">int &amp;b=a;</span><br><span class="line"></span><br><span class="line">//int &amp;c=20;//20 为右值，没内存</span><br><span class="line"></span><br><span class="line">/**********************************************************************/</span><br><span class="line">//c++11提供右值引用</span><br><span class="line"></span><br><span class="line">int &amp;&amp;c=20;//定义一个右值引用</span><br><span class="line">c=30;//可修改</span><br><span class="line"></span><br><span class="line">const int &amp;b =20;//与int &amp;&amp;c=20等同</span><br><span class="line">/*</span><br><span class="line">两者都是</span><br><span class="line">int temp =20;    先产生临时量</span><br><span class="line">temp-&gt;b引用</span><br><span class="line"></span><br><span class="line">但const b不能修改，c为引用可以修改</span><br><span class="line">*/</span><br><span class="line">int &amp;e=c;//左值引用可以引用右值， </span><br><span class="line">//int &amp;&amp;e=c;错误</span><br><span class="line">//因为右值引用要先 生成临时量，而右值引用c定义时已经生成了临时量，不要再生成一次了</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>右值引用必须先生成临时量，且可修改；不能用来引用左值（左值已有内存）</p>]]></content>
      
      
      <categories>
          
          <category> c++初级学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库面试</title>
      <link href="/2025/05/14/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95/"/>
      <url>/2025/05/14/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>mysql 关系型数据库，类似与一张excel表格</p><ol><li><p>行 对于记录， 列 对于属性</p></li><li><p>数据存放再磁盘中，而不是内存<br>show global variables like “%datadir%”<br>显示路径</p></li><li><p>b+树的形式存储， 一行行记录通过链表串在一起</p></li><li><p>文件系统与数据库的联系与区别<br>文件系统 无结构<br>数据库 有结构<br>数据库满足某种范式时，会减少冗余</p></li></ol><p>文件系统缺点： 当文件系统发生变化时，相应的程序代码也要发生变化，才能正常运行<br>而数据库通过DBMS的两级映像，实现了物理独立性与逻辑独立性<br>例<br>readexcel（list,4,”d://“）  从第四列读数据<br>select * from “表”          无需关注哪一列<br>实现了独立性</p><ol><li><p>DBMS<br>数据库管理系统<br><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250313164000.png" alt="20250313164000"></p><p>帮助我们解析sql语句，并返回结果</p></li></ol><ol><li><p>DBMS的数据物理独立性与逻辑独立性是如何实现的<br>三级模式和两级映像<br><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250313164353.png" alt="20250313164353"></p><p>外模式：用户查询到的<br>映射<br>概念模式：整张表或关系   全局逻辑结构<br>概念模式-内模式映射<br>内模式： 数据的物理存储</p><p>逻辑独立性：逻辑结构变化(加列)，代码不用变</p><p>物理独立性：内模式改变，逻辑结构不变。当内模式改变，修改映射即可，不必动其他模式</p></li><li><p>数据库的设计过程</p><ol><li>需求分析</li><li><p>概念结构设计 ： E-R图（关系图）<br><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250313165548.png" alt="20250313165548"></p></li><li><p>逻辑结构设计： ER图转变为一张表</p></li><li>物理结构设计：底层存储结构</li><li>数据库实施：把表建立起来</li><li>数据库运行的维护</li></ol></li><li>索引<br>变长记录<br>b+树： 最底层才是数据，上层是索引</li><li><p>事务<br>ACID</p><ol><li><p>atomicity原子性：事务中的所有操作，要么都成功，要么都失败<br><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250313170748.png" alt="20250313170748"><br>undo log   出错就回滚rollback</p></li><li><p>consistency一致性：事务执行之前和执行之后，数据是完全一致的</p></li><li><p>隔离性：事务之间互不影响<br>四个隔离级别：<br>Serializable、Repeatable read、read committed、read uncommitted<br><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250313171157.png" alt="20250313171157"></p></li></ol></li></ol><p>   脏读：读到了尚未被提交的数据<br>   不可重复读：前后多次读，数据不一致<br>   幻读：前后多次读，查询的结果数量不同</p><ol><li>持久性：事务执行完，数据就永久的保存在磁盘中 commit<ol><li>死锁<br>死锁的预防：打破四个条件</li><li>互斥</li><li>请求和保持</li><li>不可剥夺</li><li>循环等待 资源进行编号<br>死锁的避免： 银行家算法<br>一次性给足所有所需资源</li></ol></li></ol><ol><li>视图<br>本质是虚拟表， create view  xxx at<br>封装select语句</li><li>各种键<br>超键： 唯一标识+冗余<br>候选键： 超键无冗余<br>主键： 候选键中的一个选一个，真正的标识<br>外键： 一个表的普通属性，是另一个表的主键</li><li>范式<br>数据库的设计遵循三个范式<br>第一范式： 属性的原子性<br>属性不可再拆分  日期：年月日可再拆为年、月、日</li></ol><p>第二范式： 无部份依赖<br>消除数据冗余<br>删除异常： 不同的信息放在一张表里，删除一个信息，可能会导致另一个信息被删除<br>空字段异常<br>更新异常： 因为有冗余，更新可能麻烦<br>非主属性需要完全依赖主属性<br>学号 课程号 姓名 学分 成绩<br>学号 课程号为主属性<br>姓名只依赖学号<br>学分只依赖课程号<br>成绩做到了完全依赖<br>因此姓名学分没有做到第二范式<br>怎么解决？ 拆表<br>学生表：学号 姓名<br>课程表：课程号 课程名<br>成绩表：学号 课程号 成绩</p><p>第三范式 无传递依赖<br>学号 姓名 年龄 学院名称 学院电话<br><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250313174635.png" alt="20250313174635"><br>很多学生再同一个学院，数据冗余<br>-》更新异常</p><p>拆表：</p><ol><li>数据模型<br>层次模型<br><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250313174924.png" alt="20250313174924"></li></ol><p>网状模型<br><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250313174909.png" alt="20250313174909"></p><p>关系模型 er图</p><ol><li>关系运算<br>并 union<br>SELECT <em> FROM account WHERE id = 1<br>UNION<br>SELECT </em> FROM account WHERE id = 2;</li></ol><p>差 except<br>select <em> from account where id &lt; 3<br>except<br>select </em> from account where id = 1;</p><p>笛卡尔积<br><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250313175103.png" alt="20250313175103"></p><p>投影：<br>projection<br>select id from account;   查询某个属性</p><p>连接<br>等值连接 在笛卡尔积的基础上<br>select * from student,teacher where student.id = teacher.tid;</p><p>非等值连接</p><p>左外连接  保留整个左表</p><p>右外连接  保留整个右表</p>]]></content>
      
      
      <categories>
          
          <category> 南航面试复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ERPNEXT环境搭建</title>
      <link href="/2025/05/14/ERPNEXT%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2025/05/14/ERPNEXT%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="ERPNEXT环境搭建"><a href="#ERPNEXT环境搭建" class="headerlink" title="ERPNEXT环境搭建"></a>ERPNEXT环境搭建</h1><h2 id="配置虚拟机环境"><a href="#配置虚拟机环境" class="headerlink" title="配置虚拟机环境"></a>配置虚拟机环境</h2><ol><li>修改网络配置文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/netplan/50-cloud-init.yaml</span><br></pre></td></tr></table></figure>内容为<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">network:</span><br><span class="line">    ethernets:</span><br><span class="line">          ens33:</span><br><span class="line">            addresses: [192.168.8.98/24] # 注意缩进，：后有空格</span><br><span class="line">            dhcp4: no   # 自动获取ip，no就是静态</span><br><span class="line">            routes:</span><br><span class="line">                 - to: default</span><br><span class="line">                   via: 192.168.8.1 # 设置默认网关,注意与本机ip对应</span><br><span class="line">            dhcp6: no</span><br><span class="line">            nameservers:</span><br><span class="line">                 addresses: [114.114.114.114,8.8.8.8,4.4.4.4]</span><br><span class="line">                 # 设置DNS服务器</span><br><span class="line">    version: 2</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>重启网络服务<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure></li><li>重启ssh<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service sshd start</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>只要主机能够ping通虚拟机，就意味着可以不用再vmware黑框框里操作了<br>//友情提示不要用校园网nmmp</p></li><li><p>修改root密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure></li><li><p>换源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list.d/ubuntu.sources</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Types: deb</span><br><span class="line">URIs: https://mirrors.tuna.tsinghua.edu.cn/ubuntu</span><br><span class="line">Suites: noble noble-updates noble-backports</span><br><span class="line">Components: main restricted universe multiverse</span><br><span class="line">Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>更新apt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></li><li><p>更改时区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tzselect</span><br></pre></td></tr></table></figure></li><li>修改host<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hosts # 域名解析140.82.113.4 gitHub.com</span><br></pre></td></tr></table></figure></li><li><p>修改字符编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">locale</span><br><span class="line">export LC_ALL=C.UTF-8</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y git </span><br><span class="line">curl --version</span><br><span class="line">sudo service cron start</span><br></pre></td></tr></table></figure></li><li><p>查看服务器状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htop</span><br></pre></td></tr></table></figure></li><li><p>查看python等工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">python3 -V</span><br><span class="line">pip3 -V</span><br><span class="line">alias python=python3</span><br><span class="line"></span><br><span class="line"># 修改pip源</span><br><span class="line">mkdir ~/.pip </span><br><span class="line">sudo vim ~/.pip/pip.conf</span><br><span class="line"></span><br><span class="line">[global] </span><br><span class="line">timeout = 120 </span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple/ </span><br><span class="line">[install] </span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br><span class="line"></span><br><span class="line">sudo mkdir /root/.pip </span><br><span class="line">sudo cp ~/.pip/pip.conf /root/.pip </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">node -v</span><br><span class="line">#</span><br><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br><span class="line"></span><br><span class="line">source ~/.bashrc  # 激活远程的终端</span><br><span class="line">#####################</span><br><span class="line">vim ~/bash_profile</span><br><span class="line"></span><br><span class="line"># Load .bashrc if it exists</span><br><span class="line">if [ -f &quot;$HOME/.bashrc&quot; ]; then</span><br><span class="line">    . &quot;$HOME/.bashrc&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># Load NVM</span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">if [ -s &quot;$NVM_DIR/nvm.sh&quot; ]; then</span><br><span class="line">    . &quot;$NVM_DIR/nvm.sh&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># Optionally, automatically use the default node version</span><br><span class="line">nvm use default &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">source ~/.bash_profile # 激活本地的终端</span><br><span class="line"></span><br><span class="line">nvm install 22</span><br><span class="line"></span><br><span class="line">redis-server -v # 缓存数据库，7.0.15版本</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wkhtmltopdf -V # 将html转换为pdf</span><br><span class="line"># 网盘中的包上传</span><br><span class="line">mkdir tools</span><br><span class="line">cd ~/tools</span><br><span class="line">sudo apt-get install -f</span><br><span class="line">sudo apt --fix-broken install</span><br><span class="line"></span><br><span class="line"># 首先，确认 wkhtmltopdf 是否已成功安装</span><br><span class="line"></span><br><span class="line">dpkg -l | grep wkhtmltox</span><br><span class="line"></span><br><span class="line"># 查找 wkhtmltopdf 的安装路径</span><br><span class="line">whereis wkhtmltopdf</span><br><span class="line"></span><br><span class="line"># 如果找到了 wkhtmltopdf 的实际路径，但不在 /usr/bin/ 中，可以通过创建符号链接来解决问题。例如，假设找到的实际路径是 /usr/local/bin/wkhtmltopdf，你可以创建一个符号链接</span><br><span class="line">sudo ln -s /usr/local/bin/wkhtmltopdf /usr/bin/wkhtmltopdf</span><br><span class="line"></span><br><span class="line">#安装字体</span><br><span class="line">sudo apt-get  install -y ttf-wqy-zenhei ttf-wqy-microhei</span><br><span class="line"></span><br><span class="line">yarn -v</span><br><span class="line"># yarn的安装如下，前提npm的安装</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm install -g yarn@1.22.22</span><br><span class="line"></span><br><span class="line">vim ~/.bashrc</span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"></span><br><span class="line">添加</span><br><span class="line"># Add npm global packages to PATH</span><br><span class="line">export PATH=&quot;$HOME/.npm-global/bin:$PATH&quot;</span><br><span class="line"></span><br><span class="line">激活</span><br><span class="line">source ~/.bashrc  # 如果你编辑的是 .bashrc</span><br><span class="line"># 或者</span><br><span class="line">source ~/.bash_profile  # 如果你编辑的是 .bash_profile</span><br><span class="line"></span><br><span class="line">yarn config set registry https://registry.npmmirror.com </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql -v # 10.11.8</span><br><span class="line">sudo apt-get install -y mariadb-server mariadb-client</span><br><span class="line"></span><br><span class="line">sudo vim /etc/mysql/conf.d/mysql.cnf</span><br><span class="line"></span><br><span class="line">添加</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"># 字符集密码格式</span><br><span class="line"></span><br><span class="line">sudo vim /etc/mysql/mariadb.conf.d/50-server.cnf</span><br><span class="line"># 添加</span><br><span class="line">character-set-server=utf8mb4(这个本来有)</span><br><span class="line">collation-server=utf8mb4_general_ci(这个本来也有)</span><br><span class="line">character-set-client-handshake=FALSE</span><br><span class="line"></span><br><span class="line">还有一个conf文件</span><br><span class="line">sudo vim /etc/mysql/mariadb.conf.d/50-client.cnf </span><br><span class="line"># 以后可能会改，现在不用动</span><br><span class="line"></span><br><span class="line">重启</span><br><span class="line">service mysql restart</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(vim查找模式：/)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>sql设置初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br><span class="line"># mariadb 的root密码,这里直接按一下回车</span><br><span class="line"># unix socket认证 这里 n</span><br><span class="line"># 改密码？ y</span><br><span class="line"># 删除匿名用户？ y</span><br><span class="line"># 不允许root远程登录？ y（这个项目是y）</span><br><span class="line"># 删除test数据库？ y</span><br><span class="line"># 重新加载 y</span><br><span class="line"></span><br><span class="line">重启服务</span><br><span class="line">sudo service mysql restart</span><br><span class="line"></span><br><span class="line">sudo mysql -u root -p # 输入密码 刚才root数据库密码</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES WHERE Variable_name LIKE &#x27;character_set_%&#x27; OR Variable_name LIKE &#x27;collation%&#x27;;  # 查看字符集</span><br><span class="line"></span><br><span class="line">use mysql;</span><br><span class="line"></span><br><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;frappe&#x27;;</span><br><span class="line">grant all privileges on *.* to root@&#x27;%&#x27; identified by &#x27;frappe&#x27; WITH GRANT OPTION;</span><br><span class="line">grant all privileges on *.* to root@&#x27;localhost&#x27; identified by &#x27;frappe&#x27; WITH GRANT OPTION; # 添加root权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flush privileges; # 刷新权限</span><br><span class="line">quit;</span><br><span class="line">sudo service mysql restart</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>bench</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip3 install --upgrade frappe-bench --break-system-packages</span><br><span class="line"></span><br><span class="line">bench --version</span><br><span class="line"></span><br><span class="line">bench init --verbose --frappe-branch version-15 frappe-bench --frappe-path=https://gitee.com/mirrors/frappe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo apt install python3.12-venv</span><br><span class="line"></span><br><span class="line">cd frappe-bench</span><br><span class="line"></span><br><span class="line">bench get-app --branch version-15 erpnext https://gitee.com/ashedie/erpnext</span><br><span class="line"></span><br><span class="line">bench version # 看到一个frappe一个erpnext就好了</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ERPNEXT </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ERPNEXT环境搭建（二）</title>
      <link href="/2025/05/14/ERPNEXT%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2025/05/14/ERPNEXT%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="装bench的若干包"><a href="#装bench的若干包" class="headerlink" title="装bench的若干包"></a>装bench的若干包</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bench get-app --branch version-15 erpnext https://gitee.com/ashedie/frappe</span><br><span class="line"></span><br><span class="line">bench version # 3个了</span><br><span class="line"></span><br><span class="line">echo vm.overcommit_memory = 1 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p # 虚拟内存防止溢出</span><br><span class="line"></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"># 添加以下内容</span><br><span class="line">ulimit -SHn 65535</span><br><span class="line"></span><br><span class="line">sudo reboot</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="重启后"><a href="#重启后" class="headerlink" title="重启后"></a>重启后</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">cd frappe-bench</span><br><span class="line"></span><br><span class="line">sudo bench setup production frappe   # 最后一个单词为自己的用户名</span><br><span class="line"></span><br><span class="line">sudo -H python3 -m pip install --upgrade setuptools wheel --break-system-packages</span><br><span class="line"></span><br><span class="line">#上两个可能报错，继续</span><br><span class="line"></span><br><span class="line">sudo apt-get install -y ansible</span><br><span class="line"></span><br><span class="line">sudo bench setup production frappe # 生产环境</span><br><span class="line"></span><br><span class="line">bench new-site demo.com # 新建站点 123456</span><br><span class="line"></span><br><span class="line">bench --site demo.com add-to-hosts</span><br><span class="line"></span><br><span class="line">cat /etc/hosts # 检查一下</span><br><span class="line"></span><br><span class="line">bench --site demo.com install-app erpnext</span><br><span class="line"></span><br><span class="line">bench --site demo.com install-app zh_chinese_language</span><br><span class="line"></span><br><span class="line">sudo supervisorctl restart all</span><br><span class="line"></span><br><span class="line"># 在浏览器里输入虚拟机ip观察有没有成功，没有</span><br><span class="line"></span><br><span class="line">sudo supervisorctl restart all</span><br><span class="line">sudo supervisorctl status all</span><br><span class="line">sudo bench setup production frappe</span><br><span class="line"></span><br><span class="line">sudo chown -R frappe:frappe /home/frappe # 三个frappe均为用户名</span><br><span class="line"></span><br><span class="line">chmod 751 /home/frappe </span><br><span class="line"># rwx 111 为7</span><br><span class="line"></span><br><span class="line"># 此时打开浏览器，输入虚拟机ip，出现网页！！！ 若图片样式等有问题，浏览器中f12，看看报错，大概率assets里面东西不对，重新生成一下</span><br><span class="line">bench build --force</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250218193114.png" alt="20250218193114"></p><p>至此环境搭建完成！！！</p><p>服了，vscode中ssh又断开了</p><h1 id="vscode中ssh断开解决方法"><a href="#vscode中ssh断开解决方法" class="headerlink" title="vscode中ssh断开解决方法"></a>vscode中ssh断开解决方法</h1><p>还好，只是重启一下虚拟机ssh，改一下主机config文件</p><h1 id="vscode连接虚拟机"><a href="#vscode连接虚拟机" class="headerlink" title="vscode连接虚拟机"></a>vscode连接虚拟机</h1><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250218200318.png" alt="20250218200318"></p><h1 id="app-后加载的先生效"><a href="#app-后加载的先生效" class="headerlink" title="app 后加载的先生效"></a>app 后加载的先生效</h1><h1 id="这是管理文件-两个site-json"><a href="#这是管理文件-两个site-json" class="headerlink" title="这是管理文件 两个site json"></a>这是管理文件 两个site json</h1><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250218204529.png" alt="20250218204529"><br>在某一行中添加<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;developer_mode&quot;:1, </span><br></pre></td></tr></table></figure><br>这之后可以修改表单类型</p>]]></content>
      
      
      <categories>
          
          <category> 实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ERPNEXT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>const.一级指针与引用的结合引用</title>
      <link href="/2025/05/14/const.%E4%B8%80%E7%BA%A7%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8%E7%9A%84%E7%BB%93%E5%90%88%E5%BC%95%E7%94%A8/"/>
      <url>/2025/05/14/const.%E4%B8%80%E7%BA%A7%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8%E7%9A%84%E7%BB%93%E5%90%88%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><strong> 左值引用不能引用右值（临时量）</strong><br><strong> 右值引用可以引用右值const int &amp;a=20，(本质上为临时量分配内存后再引用)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写一段代码，在内存的0x0018ff44处写一个4B的10</span></span><br><span class="line"><span class="type">int</span>* p=(<span class="type">int</span> *)<span class="number">0x0018ff44</span>;<span class="comment">//0x0018ff44这是个数，指针p指向一个地址</span></span><br><span class="line">*p=<span class="number">10</span>;<span class="comment">//编译报错，直接对内存写入太危险了</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* &amp;&amp;p=(<span class="type">int</span> *)<span class="number">0x0018ff44</span>;<span class="comment">//(int *)0x0018ff4是右值，采用右值引用</span></span><br><span class="line"><span class="comment">//int * const &amp;p</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const-一级指针-引用的结合使用"><a href="#const-一级指针-引用的结合使用" class="headerlink" title="const 一级指针 引用的结合使用"></a>const 一级指针 引用的结合使用</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a =<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> *<span class="type">const</span> p=&amp;a;</span><br><span class="line">    <span class="type">int</span> *&amp;q=p;  <span class="comment">//int*&lt;=const int*,转换错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> *p=&amp;s;</span><br><span class="line">    <span class="type">int</span> *&amp;q=p;  <span class="comment">//分析这种引用</span></span><br><span class="line">    <span class="comment">//把引用转换为指针</span></span><br><span class="line">    <span class="comment">//等同于 int **q=&amp;p;</span></span><br><span class="line">    <span class="comment">//int **&lt;=const int **,转换错误(右边是指针取地址)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> *p=&amp;a;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> *&amp;q=p;</span><br><span class="line">    <span class="comment">//const int **q=&amp;p;</span></span><br><span class="line">    <span class="comment">//const int **&lt;=int **  !注意二级指针const与非const不能转化</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> *p=&amp;a;</span><br><span class="line">    <span class="type">int</span> *<span class="type">const</span> *q=&amp;p;</span><br><span class="line">    <span class="comment">//const 修饰int * ,*&lt;=*,可以的</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++初级学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++面向对象</title>
      <link href="/2025/05/14/C++%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2025/05/14/C++%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="C-面向对象"><a href="#C-面向对象" class="headerlink" title="C++面向对象"></a>C++面向对象</h1><p>oop即面向对象<br>用类代替实体的抽象类型<br>实体（属性、行为） -&gt; ADT(Abstract Data Type)抽象的数据类型<br> |                           |<br>对象              &lt;-（实例化）类（属性-&gt;成员变量，行为-&gt;成员方法）</p><p>oop即面向对象语言的四大特征<br>1.抽象<br>2.继承<br>3.多态<br>4.封装/隐藏  访问限定符 public private protected</p><p>用类来描述商品（实体）<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int NAME_LEN=20;</span><br><span class="line">class CGoods    //class定义类，struct也可以定义类</span><br><span class="line">&#123;               //二者有何不同？ 驼峰式，类名首单词大写，成员首单词小写</span><br><span class="line">    public:</span><br><span class="line">        void init(char *name,double price,int amount);//做数据初始化</span><br><span class="line">        void show();    //打印商品信息</span><br><span class="line">        //给成员变量提供一组getxxx或setxxx方法,类体内的实现方法，自动处理成inline内联函数</span><br><span class="line">        void setName(char *name)</span><br><span class="line">        &#123;</span><br><span class="line">            strcpy(_name,name); //后给前</span><br><span class="line">        &#125;</span><br><span class="line">        void setPrice(double price)</span><br><span class="line">        &#123;</span><br><span class="line">            _price=price;</span><br><span class="line">        &#125;</span><br><span class="line">        void setAmount(int amount)</span><br><span class="line">        &#123;</span><br><span class="line">            _amount=amount;</span><br><span class="line">        &#125;</span><br><span class="line">        const char *getName()</span><br><span class="line">        &#123;</span><br><span class="line">            return _name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;  //防止private变量通过指针被修改</span><br><span class="line">        double getPrice()</span><br><span class="line">        &#123;</span><br><span class="line">            return _price;</span><br><span class="line">        &#125;</span><br><span class="line">        int getAmount()</span><br><span class="line">        &#123;</span><br><span class="line">            return _amount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private:    //private成员变量/属性,属性一般都是私有的，对外部提供公共方法访问私有属性</span><br><span class="line">        char _name[NAME_LEN];</span><br><span class="line">        double _price;;</span><br><span class="line">        int _amount;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//类外定义成员方法</span><br><span class="line">void CGoods::init(char *name,double price,int amount);//做数据初始化</span><br><span class="line">&#123;</span><br><span class="line">    strcpy(_name,name);</span><br><span class="line">    _price=price;</span><br><span class="line">    _amount=amount;</span><br><span class="line">&#125;        </span><br><span class="line">void CGoods::show()    //在方法名前加作用域</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;&quot;name:&quot;&lt;&lt;_name&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;price:&quot;&lt;&lt;_price&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;amount:&quot;&lt;&lt;_amount&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    CGoods good;    //实例化</span><br><span class="line">    good.init(&quot;apple&quot;,3.5,100); //新版编译器中，字符串是const chaar</span><br><span class="line">    //strcpy可能报错，sdl检查改为否</span><br><span class="line">    good.show();</span><br><span class="line">    //对象的内存大小只与成员变量有关，与方法无关，且是最长那个成员变量的整数倍</span><br><span class="line">    //在vs中打开终端，确保是cl，打开对应文件</span><br><span class="line">    //cl cpp.cpp /d1reportSingleClassLayoutCGoods</span><br><span class="line">    </span><br><span class="line">    CGoods good2;;</span><br><span class="line">    good2.init(&quot;banana&quot;,2.5,200);   //不同对象</span><br><span class="line">    //类的成员方法一经编译，所有的方法参数，都会加一个this指针</span><br><span class="line">    //    void CGoods::init(char *name,double price,int amount);//做数据初始化</span><br><span class="line">    //    &#123;</span><br><span class="line">    //        strcpy(_name,name);</span><br><span class="line">    //        this-&gt;_price=price;</span><br><span class="line">    //        this-&gt;_amount=amount;</span><br><span class="line">    //    &#125;   例如在good2.init（）中，this指针指向good2</span><br><span class="line">    //在good1.init（）中，this指针指向good1</span><br><span class="line">    //因此即使共享一套成员方法，仍然可以指向不同的对象</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/20250221152832.png" alt="20250221152832"></p><p>name后面写着补齐4B，原来只有20B，但必须是double 8B的倍数</p>]]></content>
      
      
      <categories>
          
          <category> c++初级学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基础部分</title>
      <link href="/2025/05/14/C++%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/"/>
      <url>/2025/05/14/C++%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20250107134923183" alt="image-20250107134923183"></p><h1 id="形参带默认值的函数"><a href="#形参带默认值的函数" class="headerlink" title="形参带默认值的函数"></a>形参带默认值的函数</h1><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*形参带默认值的函数*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b=<span class="number">20</span>)</span><span class="comment">//int sum(int a=20,int b)这是错误的，默认值从右向左给</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//这是函数的定义</span></span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a =<span class="number">10</span></span><br><span class="line"><span class="type">int</span> b=<span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> ret=<span class="built_in">sum</span>(a,b);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">MOV EAX,DWORD PTR[EBP-4]     ba压栈</span></span><br><span class="line"><span class="comment">PUSH EAX</span></span><br><span class="line"><span class="comment">MOV EAX,DWORD PTR[EBP-8]</span></span><br><span class="line"><span class="comment">PUSH EAX</span></span><br><span class="line"><span class="comment">call sum</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ret=<span class="built_in">sum</span>(a)</span><br><span class="line"><span class="comment">/*    </span></span><br><span class="line"><span class="comment">PUSH 14H   20直接压，不用MOV传，少了一条指令ba压栈</span></span><br><span class="line"><span class="comment">MOV EAX,DWORD PTR[EBP-8]</span></span><br><span class="line"><span class="comment">PUSH EAX</span></span><br><span class="line"><span class="comment">call sum</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;ret:&quot;</span>&lt;&lt;ret&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></h2><p>上述为先<u>定义</u>，后<u>调用</u>；下为先<u>声明</u>，后调用，最后定义（或定义在另一个文件）<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b=<span class="number">20</span>)</span></span>;  <span class="comment">//声明</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a =<span class="number">10</span></span><br><span class="line"><span class="type">int</span> b=<span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> ret=<span class="built_in">sum</span>(a,b);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">MOV EAX,DWORD PTR[EBP-4]     ba压栈</span></span><br><span class="line"><span class="comment">PUSH EAX</span></span><br><span class="line"><span class="comment">MOV EAX,DWORD PTR[EBP-8]</span></span><br><span class="line"><span class="comment">PUSH EAX</span></span><br><span class="line"><span class="comment">call sum</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ret=<span class="built_in">sum</span>(a)</span><br><span class="line"><span class="comment">/*    </span></span><br><span class="line"><span class="comment">PUSH 14H   20直接压，不用MOV传，少了一条指令ba压栈</span></span><br><span class="line"><span class="comment">MOV EAX,DWORD PTR[EBP-8]</span></span><br><span class="line"><span class="comment">PUSH EAX</span></span><br><span class="line"><span class="comment">call sum</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;ret:&quot;</span>&lt;&lt;ret&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b=<span class="number">20</span>)</span><span class="comment">//int sum(int a=20,int b)这是错误的，默认值从右向左给</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//这是函数的定义</span></span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li><p>**形参给默认值，可以在声明时给出，即无论定义还是声明都能给形参默认值</p></li><li><p>**声明可以多次</p></li><li><p><em>*</em>无论如何，一个形参只能给一个默认值</p></li><li><p>可以第一次先给右形参，第二次再给左形参的默认值<br><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20250107143538180.png" alt=""></p><p>这是正确的</p></li></ol><h1 id="掌握inline内联函数"><a href="#掌握inline内联函数" class="headerlink" title="掌握inline内联函数"></a>掌握inline内联函数</h1><h3 id="inline内联函数和普通函数的区别？"><a href="#inline内联函数和普通函数的区别？" class="headerlink" title="inline内联函数和普通函数的区别？"></a>inline内联函数和普通函数的区别？</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b=<span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">sum</span>(a,b);<span class="comment">//先函数的调用，函数调用开销：参数压栈，函数栈帧开辟和回退</span></span><br><span class="line"><span class="comment">//实际上sum只有：mov add mov</span></span><br><span class="line"><span class="comment">//为了这三个指令，函数调用却要那么大开销，效率很低</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单函数，函数调用开销已经大于本身函数了，效率很低<br><strong>inline内联函数：在编译过程中，没有函数的调用开销，而是在函数的调用点直接把函数的代码进行展开处理</strong></p><ol><li>inline 函数直接展开，因此不会再产生相应函数符号</li><li>但不是所有inline都被编译器处理成内联函数，如递归（仅仅是展开不知道要递归多少次，因此递归不可能时内联）,代码过长</li><li>inline只是建议编译器内联展开</li><li>inline在debug版本不起作用，release版本才能出现</li></ol><h1 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h1><ol><li>c++为什么支持函数重载，而c不支持</li><li>重载要注意什么</li><li>c与c++如何互相调用</li></ol><p>下为函数重载的例子：<br>**一组函数，函数名相同，参数不同<br>调用时根据实参，选择对应的定义<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;compare_int_int&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">double</span> a,<span class="type">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;compare_int_int&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* a,<span class="type">const</span> <span class="type">char</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;compare_int_int&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">compare</span>(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">compare</span>(<span class="number">10.0</span>,<span class="number">20</span>。<span class="number">0</span>);</span><br><span class="line"><span class="built_in">compare</span>(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="1-c-为什么支持函数重载，而c不支持"><a href="#1-c-为什么支持函数重载，而c不支持" class="headerlink" title="1. c++为什么支持函数重载，而c不支持"></a>1. c++为什么支持函数重载，而c不支持</h3><p>c++代码编译时产生函数符号，由函数名+参数构成<br>c只有函数名</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;compare_int_int&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">double</span> a,<span class="type">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;compare_int_int&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* a,<span class="type">const</span> <span class="type">char</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;compare_int_int&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>;<span class="comment">//函数的声明</span></span><br><span class="line"><span class="built_in">compare</span>(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">compare</span>(<span class="number">10.0</span>,<span class="number">20</span>。<span class="number">0</span>);<span class="comment">//2,函数调用的时候，有声明就够了，优先用作用域内的声明</span></span><br><span class="line"><span class="built_in">compare</span>(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>);<span class="comment">//3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里23会报错<br>为什么呢？<br>类比举例如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> data=<span class="number">10</span>;<span class="comment">//全局作用域</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> data=<span class="number">20</span>;<span class="comment">//局部作用域</span></span><br><span class="line"><span class="type">int</span> a=data;</span><br><span class="line">cout&lt;&lt;a&lt;&lt;endl;<span class="comment">//优先就近用局部作用域20，若a想用全局作用域 int a=::data;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>**由此，函数重载只在同一个作用域中，只有在同一个作用域中才能称作函数重载</p><h3 id="const与volatile"><a href="#const与volatile" class="headerlink" title="const与volatile"></a>const与volatile</h3><p>这算函数重载吗？<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">const</span> <span class="type">int</span> a)</span></span>&#123;&#125;<span class="comment">//编译器认为这两者是一样的</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> b=<span class="number">10</span>;</span><br><span class="line">cout&lt;&lt;<span class="built_in">typeid</span>(a).<span class="built_in">name</span>()&lt;&lt;endl;<span class="comment">//结果为int</span></span><br><span class="line">cout&lt;&lt;<span class="built_in">typeid</span>(a).<span class="built_in">name</span>()&lt;&lt;endl;<span class="comment">//结果也为int</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这是函数重定义</p><p>那这两者有何区别?<br><strong>const与volatile到底如何影响形参类型的？（以后说）</strong></p><p>**一组函数，函数名相同，参数列表也相同，仅仅是返回值不同，不叫函数重载！！</p><p>**函数重载的本质：生成符号不同，例如上例compare_int_int，compare_double_double,这两者符号不同，但返回值不体现在符号里，不算做重载</p><h3 id="请你解释一下，什么是多态？"><a href="#请你解释一下，什么是多态？" class="headerlink" title="请你解释一下，什么是多态？"></a>请你解释一下，什么是多态？</h3><p>静态（编译时期）多态—其中一种就是函数重载，别的还有模板（以后）<br>动态（运行时期）</p><h3 id="c调用c-与c-调用c"><a href="#c调用c-与c-调用c" class="headerlink" title="c调用c++与c++调用c"></a>c调用c++与c++调用c</h3><p>c文件<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>c++文件，头文件等写好后</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;<span class="comment">//1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ret =<span class="built_in">sum</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会报错”无法识别的外部符号sum“，因为1处sum编译为符号sum_int_int,然后去c里找，而c中sum符号为sum，编译器找不到，所以报错。</p><p>因此无法直接调用，要用到<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span><span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>总结：c++调用c，把c语言函数的声明括在extern”c“里面</strong><br><strong>反之，c调用c++，也是extern”c“，把c++的源码括在extern”c“里面，（在c++中，c不认识extern ”c“）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#ifdef _cplusplus//如果是c编译器，没有_cplusplus</span><br><span class="line">extern &quot;C&quot;&#123;//ifdef与endif之间的都看不到，只能看到sum的定义</span><br><span class="line">#endif//如果是c++，会有extern”c“，</span><br><span class="line">int sum(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">return a+b;</span><br><span class="line">&#125;</span><br><span class="line">#ifdef _cplusplus</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>只要是c++编译器，都内置_cplusplus这个宏名<br>_FILE<em>  _LINE\</em> 都是宏，为文件名与行数</p>]]></content>
      
      
      <categories>
          
          <category> c++初级学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习-1编译链接原理</title>
      <link href="/2024/12/29/C++%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5%E4%B8%8E%E6%8C%87%E4%BB%A4/"/>
      <url>/2024/12/29/C++%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5%E4%B8%8E%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="编译链接原理"><a href="#编译链接原理" class="headerlink" title="编译链接原理"></a>编译链接原理</h1><h2 id="1-预编译"><a href="#1-预编译" class="headerlink" title="1.预编译"></a>1.预编译</h2><p>开头的命令</p><p>注意以下代码==不是==预编译</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> lib             <span class="comment">//链接库 链接阶段，为链接器提供东西</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> link<span class="comment">//main为一般入口函数， 改变入口函数</span></span></span><br></pre></td></tr></table></figure><hr><h2 id="2-编译"><a href="#2-编译" class="headerlink" title="2.编译"></a>2.编译</h2><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20241229154454330.png" alt="image-20241229154454330"></p><h2 id="3-汇编"><a href="#3-汇编" class="headerlink" title="3.汇编"></a>3.汇编</h2><p> x86 ATA  生成.o</p><hr><h2 id="4-链接："><a href="#4-链接：" class="headerlink" title="4.链接："></a>4.链接：</h2><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20241229155506604.png" alt="image-20241229155506604"></p><p>符号解析</p><p>符号的重定位 <em>核心</em></p><font color=red>**链接主要是将.o文件重定位**</font><p>查看.o文件详细信息，.o可重定位，不可执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump   -t main.o</span><br></pre></td></tr></table></figure><p>查看.o文件符号</p><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20241229161345141.png" alt="image-20241229161345141"></p><p>以上代码，gdata sum为引用，但是二者都在.o文件中产生了符号</p><p><img src="C.assets/image-20241229161551400.png" alt="image-20241229161551400"></p><ol><li>main —text 在代码段</li></ol><p>​         data  —data 在数据段</p><p>​         <u> gdata、sum— ==UND==  引用</u></p><ol><li><p>第二列 l：loca l；g：global</p><pre><code>    链接时链接器只能看见g，静态变量是l，</code></pre></li></ol><hr><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20241229162259209.png" alt="image-20241229162259209"></p><p>sum 和形参一起生成符号</p><hr><p>.o文件组成：</p><p>elf文件头   每个段一个文件头</p><p>text</p><p>data</p><p>bss</p><p>symbal</p><p>section table</p><p>编译过程中符号不分配地址</p><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20241229162957864.png" alt="image-20241229162957864"></p><p>注意到 data、gdata 地址都为0</p><hr><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>各个段进行合并  .text&lt;=&gt;.text</p><p>对符号的引用（UND） 换成定义 （在其他段寻找) ，且只允许找到一个定义（符号重定义)</p><p>符号解析成功后，给所有符号==分配虚拟地址==。  符号的重定向</p><p>链接完，成exe/out 可重定向=》可执行</p><hr><h3 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h3><p>有program headers </p><p>内容：两个load，把代码段、数据段 加载到内存，其他不用加载到内存</p><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20241229165246968.png" alt="image-20241229165246968"></p><p>我408也没白学哈哈哈呜呜</p><hr><hr><h1 id="指令角度掌握函数调用过程"><a href="#指令角度掌握函数调用过程" class="headerlink" title="指令角度掌握函数调用过程"></a>指令角度掌握函数调用过程</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//push ebp 保存此时栈底(main)</span></span><br><span class="line">    <span class="comment">//mov ebp,esp  </span></span><br><span class="line">    <span class="comment">//sub esp,4CH 为sum开辟空间 </span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="type">int</span> temp = <span class="number">0</span>;   <span class="comment">//mov dword ptr[ebp-4],0</span></span><br><span class="line">temp = a + b;<span class="comment">//mov eax,dword ptr[ebp+0CH]</span></span><br><span class="line">    <span class="comment">//add eax,dword ptr[ebp+8]  a+b</span></span><br><span class="line">    <span class="comment">//mov dword ptr[ebp-4],eax</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> temp;<span class="comment">//mov eax,dword ptr[ebp-4]</span></span><br><span class="line">&#125;<span class="comment">//mov esp,ebp;  回退栈帧，但数据并没有清理</span></span><br><span class="line"><span class="comment">//pop ebp  找回main 的栈底</span></span><br><span class="line"><span class="comment">//ret:出栈 （下一条指令地址给pc）</span></span><br><span class="line"><span class="comment">//回到main下一条指令</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;<span class="comment">//mov dword ptr[ebp-4], 0Ah</span></span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;<span class="comment">//mov dword ptr[ebp-8], 14h</span></span><br><span class="line"><span class="type">int</span> ret=<span class="built_in">sum</span>(a, b); <span class="comment">//main调用sum完，如何回来？</span></span><br><span class="line">    <span class="comment">//1.压栈 b 从右边开始  mov eax,dowrd ptr[ebp-4]</span></span><br><span class="line">    <span class="comment">//                   push eax</span></span><br><span class="line">    <span class="comment">//                   mov eax,dowrd ptr[ebp-8]</span></span><br><span class="line"><span class="comment">//                   push eax</span></span><br><span class="line">    <span class="comment">//                   call sum  :去执行sum了</span></span><br><span class="line">    <span class="comment">//0x08124458 add esp,8   下一条指令，esp+8.释放ab两个形参</span></span><br><span class="line">    <span class="comment">// mov dword ptr[ebp-0ch],eax    eax=30</span></span><br><span class="line">    <span class="comment">//eax--&lt;=4 ;eax+edx---&lt;=8;&gt;8产生临时量带出返回值</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ret:&quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main调用sum后，如何回来？"><a href="#main调用sum后，如何回来？" class="headerlink" title="main调用sum后，如何回来？"></a>main调用sum后，如何回来？</h3><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20241229174349632.png" alt="image-20241229174349632" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/Yolo-ZZY/Image/image-20241229174314915.png" alt="image-20241229174314915" style="zoom:50%;" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建本地博客</title>
      <link href="/2024/12/28/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B8%80/"/>
      <url>/2024/12/28/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="记录创建博客"><a href="#记录创建博客" class="headerlink" title="#记录创建博客"></a>#记录创建博客</h1><p>1.链接：<a href="https://pan.baidu.com/s/1lZNI9BbnDl_wzrqU7DAmxA">https://pan.baidu.com/s/1lZNI9BbnDl_wzrqU7DAmxA</a> 提取码：2ez8</p><p>2.<a href="https://blog.csdn.net/qq_58608526/article/details/124652412">Hexo+Github博客搭建教程_hexo github-CSDN博客</a></p><h2 id="npm换源"><a href="#npm换源" class="headerlink" title="##npm换源"></a>##npm换源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="##结语"></a>##结语</h2><p>本想着今天开始痛改前非，狠学C++的，结果搞上这个了。。。搞了一下午，也没学成，明天还要回老家，不知道要多久，不会这是我的开始也是结束吧。。。</p>]]></content>
      
      
      <categories>
          
          <category> 搭建个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
